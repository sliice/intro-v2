{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nconst storageName = 'userData'; // saving the token, userID and userType in a local storage\n\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [ready, setReady] = useState(false);\n  const [userID, setuserID] = useState(null);\n  const [userType, setuserType] = useState(null);\n  const [name, setName] = useState(null);\n  const [surname, setSurname] = useState(null);\n  const [username, setUsername] = useState(null);\n  const login = useCallback((jwtToken, userID, userType, name, surname, username) => {\n    setToken(jwtToken);\n    setuserID(userID);\n    setuserType(userType);\n    setName(name);\n    setSurname(surname);\n    setUsername(username);\n    localStorage.setItem(storageName, JSON.stringify({\n      userID,\n      token: jwtToken,\n      userType,\n      name,\n      surname,\n      username\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setuserID(null);\n    setuserType(null);\n    setName(null);\n    setSurname(null);\n    setUsername(null);\n    localStorage.removeItem(storageName);\n  }, []);\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName));\n    if (data && data.token) login(data.token, data.userID, data.userType, data.name, data.surname, data.username);\n    setReady(true);\n  }, [login]);\n  return {\n    login,\n    logout,\n    token,\n    userID,\n    username,\n    name,\n    surname,\n    userType,\n    ready\n  };\n};","map":{"version":3,"sources":["/Users/alisakrylova/Intro/client/src/hooks/auth.hook.js"],"names":["useState","useCallback","useEffect","storageName","useAuth","token","setToken","ready","setReady","userID","setuserID","userType","setuserType","name","setName","surname","setSurname","username","setUsername","login","jwtToken","localStorage","setItem","JSON","stringify","logout","removeItem","data","parse","getItem"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,WAAlB,EAA+BC,SAA/B,QAAgD,OAAhD;AAEA,MAAMC,WAAW,GAAG,UAApB,C,CAEA;;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,IAAD,CAAxC;AAGA,QAAMmB,KAAK,GAAGlB,WAAW,CAAC,CAACmB,QAAD,EAAWX,MAAX,EAAmBE,QAAnB,EAA6BE,IAA7B,EAAmCE,OAAnC,EAA4CE,QAA5C,KAAyD;AAC/EX,IAAAA,QAAQ,CAACc,QAAD,CAAR;AACAV,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAG,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAG,IAAAA,WAAW,CAACD,QAAD,CAAX;AAEAI,IAAAA,YAAY,CAACC,OAAb,CAAqBnB,WAArB,EAAkCoB,IAAI,CAACC,SAAL,CAAe;AAAEf,MAAAA,MAAF;AAAUJ,MAAAA,KAAK,EAAEe,QAAjB;AAA2BT,MAAAA,QAA3B;AAAqCE,MAAAA,IAArC;AAA2CE,MAAAA,OAA3C;AAAoDE,MAAAA;AAApD,KAAf,CAAlC;AAEH,GAVwB,EAUtB,EAVsB,CAAzB;AAWA,QAAMQ,MAAM,GAAGxB,WAAW,CAAC,MAAM;AAC7BK,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,WAAW,CAAC,IAAD,CAAX;AAEAG,IAAAA,YAAY,CAACK,UAAb,CAAwBvB,WAAxB;AACH,GATyB,EASvB,EATuB,CAA1B;AAWAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMyB,IAAI,GAAGJ,IAAI,CAACK,KAAL,CAAWP,YAAY,CAACQ,OAAb,CAAqB1B,WAArB,CAAX,CAAb;AAEA,QAAIwB,IAAI,IAAIA,IAAI,CAACtB,KAAjB,EAAwBc,KAAK,CAACQ,IAAI,CAACtB,KAAN,EAAasB,IAAI,CAAClB,MAAlB,EAA0BkB,IAAI,CAAChB,QAA/B,EAAyCgB,IAAI,CAACd,IAA9C,EAAoDc,IAAI,CAACZ,OAAzD,EAAkEY,IAAI,CAACV,QAAvE,CAAL;AAExBT,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GANQ,EAMN,CAACW,KAAD,CANM,CAAT;AAQA,SAAO;AAAEA,IAAAA,KAAF;AAASM,IAAAA,MAAT;AAAiBpB,IAAAA,KAAjB;AAAwBI,IAAAA,MAAxB;AAAgCQ,IAAAA,QAAhC;AAA0CJ,IAAAA,IAA1C;AAAgDE,IAAAA,OAAhD;AAAyDJ,IAAAA,QAAzD;AAAmEJ,IAAAA;AAAnE,GAAP;AACH,CAzCM","sourcesContent":["import {useState, useCallback, useEffect } from 'react'\n\nconst storageName = 'userData'\n\n// saving the token, userID and userType in a local storage\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(null)\n    const [ready, setReady] = useState(false)\n    const [userID, setuserID] = useState(null)\n    const [userType, setuserType] = useState(null)\n    const [name, setName] = useState(null)\n    const [surname, setSurname] = useState(null)\n    const [username, setUsername] = useState(null)\n\n\n    const login = useCallback((jwtToken, userID, userType, name, surname, username) => {\n        setToken(jwtToken)\n        setuserID(userID)\n        setuserType(userType)\n        setName(name)\n        setSurname(surname)\n        setUsername(username)\n\n        localStorage.setItem(storageName, JSON.stringify({ userID, token: jwtToken, userType, name, surname, username }))\n\n    }, [])\n    const logout = useCallback(() => {\n        setToken(null)\n        setuserID(null)\n        setuserType(null)\n        setName(null)\n        setSurname(null)\n        setUsername(null)\n\n        localStorage.removeItem(storageName)\n    }, [])\n\n    useEffect(() => {\n        const data = JSON.parse(localStorage.getItem(storageName))\n\n        if (data && data.token) login(data.token, data.userID, data.userType, data.name, data.surname, data.username)\n\n        setReady(true)\n    }, [login])\n\n    return { login, logout, token, userID, username, name, surname, userType, ready }\n}"]},"metadata":{},"sourceType":"module"}