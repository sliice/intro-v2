{"ast":null,"code":"import { useState, useCallback } from 'react'; //  do http requests\n// and get the http responses\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        if (data.message === 'Not authorised yet') alert('fdssfsfd');\n        throw new Error(data.message || 'Something went wrong');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};","map":{"version":3,"sources":["/Users/alisakrylova/Intro/client/src/Hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","message","alert","Error","e","clearError"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC,C,CAEA;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAOO,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AAClF,QAAI;AACA,UAAID,IAAJ,EAAS;AACLA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH;;AAED,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;AACA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAiB;AACb,YAAIF,IAAI,CAACG,OAAL,KAAiB,oBAArB,EAA2CC,KAAK,CAAC,UAAD,CAAL;AAC3C,cAAM,IAAIC,KAAJ,CAAUL,IAAI,CAACG,OAAL,IAAgB,sBAA1B,CAAN;AACH;;AACDf,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,aAAOY,IAAP;AACH,KAhBD,CAiBA,OAAOM,CAAP,EAAU;AACNlB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACgB,CAAC,CAACH,OAAH,CAAR;AACA,YAAMG,CAAN;AACH;AACJ,GAvB0B,EAuBxB,EAvBwB,CAA3B;AAyBA,QAAMC,UAAU,GAAGtB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,EAAuB,EAAvB,CAA9B;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BkB,IAAAA;AAA1B,GAAP;AACH,CAhCM","sourcesContent":["import {useState, useCallback} from 'react'\n\n//  do http requests\n// and get the http responses\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null )\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        try {\n            if (body){\n                body = JSON.stringify(body)\n                headers['Content-Type'] = 'application/json'\n            }\n\n            const response = await fetch(url, {method, body, headers})\n            const data = await response.json()\n\n            if (!response.ok){\n                if (data.message === 'Not authorised yet') alert('fdssfsfd')\n                throw new Error(data.message || 'Something went wrong')\n            }\n            setLoading(false)\n\n            return data\n        }\n        catch (e) {\n            setLoading(false)\n            setError(e.message)\n            throw e\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n\n    return {loading, request, error, clearError }\n}"]},"metadata":{},"sourceType":"module"}