{"ast":null,"code":"var _jsxFileName = \"/Users/alisakrylova/Intro/client/src/components/EditTest.js\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport classNames from 'classnames/bind';\nimport './Appearence/index.css';\nimport './Appearence/AddTest.css';\nimport { AuthContext } from \"./Context/AuthContext\";\nimport createShortLink from \"./Functions and const/CreateShortLink\";\nimport { useHttp } from \"../Hooks/http.hook\";\nimport { ReactComponent as AddIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./Appearence/Images/AddIcon.svg\";\nimport { ReactComponent as CancelIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./Appearence/Images/CancelIcon.svg\";\nimport notify from './Functions and const/Notify';\nimport showError from './Functions and const/ShowError';\nimport { RegExps } from \"./Functions and const/RegExps\";\nexport const EditTest = () => {\n  // const testlink = useParams().link\n  //\n  //     const {token} = useContext(AuthContext)\n  //     const {request} = useHttp();\n  //\n  //     const [testData, setTestData] = useState({\n  //         name: '',\n  //         link: '',\n  //         shortDescription: '',\n  //         description: '',\n  //         scales: [{\n  //             name: '' ,\n  //             k: '',\n  //             intervals: [{\n  //                 name: '',\n  //                 description: '',\n  //                 min: '',\n  //                 max: '',\n  //                 important: false\n  //             }]\n  //         }\n  //         ],\n  //         questions: [''],\n  //         answers: [''],\n  //         scaleanswers: [{\n  //             k: '',\n  //             questions: []\n  //         }]\n  //     })\n  //\n  //     const isImportantBtn = isImportant => {\n  //         return classNames({inactiveImportantBtn: !isImportant, activeImportantBtn: isImportant})\n  //     }\n  //     const textStatus = isActive => {\n  //         return classNames({inactiveText: !isActive, activeText: isActive})\n  //     }\n  //\n  //     const fetchTest = useCallback(async() => {\n  //         try {\n  //             const fetched = await request(`/api/tests/${testlink}`, 'GET', null, {\n  //                 Authorization: `Bearer ${token}`\n  //             })\n  //             console.log(fetched)\n  //             setTestData(fetched)\n  //         }\n  //         catch (e) {}\n  //     }, [token, request])\n  //\n  //     const handleSaving = async(e) => {\n  //         e.preventDefault()\n  //         // await saveTestDraft()\n  //         await saveTest()\n  //     }\n  //\n  //     const saveTestDraft = async() => {\n  //         const data = await request('addtest/savedraft', 'POST', {...testData, date: new Date()})\n  //         if (data.message === 'Draft is saved') notify('Черновик сохранён')\n  //     }\n  //\n  //     const saveTest = async() => {\n  //         const data = await request('addtest/savetest', 'POST', {...testData, date: new Date()})\n  //         if (data.message === 'Test is saved') notify('Тест сохранён')\n  //     }\n  //\n  //     const changeHandler = e => {\n  //         e.preventDefault()\n  //         if (e.target.name === 'name') {\n  //             let link = createShortLink(e.target.value)\n  //             setTestData({...testData, [e.target.name]: e.target.value, link})\n  //         }\n  //         else setTestData({...testData, [e.target.name]: e.target.value})\n  //     }\n  //\n  //     const handleAddingScale = e => {\n  //         e.preventDefault()\n  //         const scales = testData.scales\n  //         scales.push({\n  //             name: '' ,\n  //             k: '',\n  //             intervals: [{\n  //                 name: '',\n  //                 description: '',\n  //                 min: '',\n  //                 max: '',\n  //                 important: false\n  //             }]\n  //         })\n  //         setTestData({...testData, scales})\n  //     }\n  //\n  //     const handleDeletingScale = (e, i) => {\n  //         e.preventDefault()\n  //         let scales = testData.scales\n  //         scales.splice(i, 1)\n  //         setTestData({...testData, scales})\n  //         if (scales.length == 0) handleAddingScale(e)\n  //     }\n  //\n  //     const handleAddingInterval = (e, i) => {\n  //         e.preventDefault()\n  //         let scales = testData.scales\n  //         let intervals = scales[i]['intervals']\n  //         intervals.push({\n  //             name: '',\n  //             description: '',\n  //             min: '',\n  //             max: '',\n  //             important: false\n  //         })\n  //         scales['intervals'] = intervals\n  //         setTestData({...testData, scales})\n  //     }\n  //\n  //     const handleDeletingInterval = (e, i, j) => {\n  //         e.preventDefault()\n  //         let scales = testData.scales\n  //         let intervals = scales[i]['intervals']\n  //         intervals.splice(j, 1)\n  //         scales['intervals'] = intervals\n  //         setTestData({...testData, scales})\n  //         if (intervals.length == 0) handleAddingInterval(e, i)\n  //     }\n  //\n  //     const handleAddingAnswer = e => {\n  //         e.preventDefault()\n  //         const answers = testData.answers\n  //         answers.push(e.target.value)\n  //         setTestData({...testData, answers})\n  //     }\n  //\n  //     const handleDeletingAnswer = (e, i) => {\n  //         e.preventDefault()\n  //         let answers = testData.answers\n  //         answers.splice(i, 1)\n  //         setTestData({...testData, answers})\n  //         if (answers.length == 0) handleAddingAnswer(e)\n  //     }\n  //\n  //     const handleAddingQuestion = e => {\n  //         e.preventDefault()\n  //         const questions = testData.questions\n  //         questions.push(e.target.value)\n  //         setTestData({...testData, questions})\n  //     }\n  //\n  //     const handleDeletingQuestion = (e, i) => {\n  //         e.preventDefault()\n  //         let questions = testData.questions\n  //         questions.splice(i, 1)\n  //         setTestData({...testData, questions})\n  //         if (questions.length == 0) handleAddingQuestion(e)\n  //     }\n  //\n  //     const changeScaleHandler = (e, i) => {\n  //         let scales = testData.scales\n  //         scales[i][e.target.name] = e.target.value\n  //         setTestData({...testData, scales})\n  //     }\n  //\n  //     const changeIntervalHandler = (e, i, j) => {\n  //         e.preventDefault()\n  //         let scales = testData.scales\n  //         let intervals = scales[i]['intervals']\n  //\n  //         if (e.target.id === 'isImportantYes' || e.target.id === 'isImportantNo' || e.target.id === 'isImportantP')\n  //             intervals[j]['important'] = !intervals[j]['important']\n  //\n  //         else\n  //             intervals[j][e.target.name] = e.target.value\n  //\n  //         scales[i]['intervals'] = intervals\n  //         setTestData({...testData, scales})\n  //     }\n  //\n  //     const changeAnswersHandler = (e, i) => {\n  //         e.preventDefault()\n  //         let answers = testData.answers\n  //         answers[i] = e.target.value\n  //         setTestData({...testData, answers})\n  //     }\n  //\n  //     const changeQuestionsHandler = (e, i) => {\n  //         e.preventDefault()\n  //         let questions = testData.questions\n  //         questions[i] = e.target.value\n  //         setTestData({...testData, questions})\n  //     }\n  //\n  //     const changeScaleAnswersHandler = (e, i, j) => {\n  //         e.preventDefault()\n  //         let data = testData\n  //         let questions = [], index, scaleanswers = {\n  //             k: 1,\n  //             questions: []\n  //         }\n  //\n  //         if (data.scaleanswers[i])\n  //             scaleanswers = data.scaleanswers[i]\n  //\n  //         if (e.target.name === 'k')\n  //             scaleanswers.k = e.target.value\n  //\n  //         else {\n  //\n  //             if (scaleanswers.questions) {\n  //                 questions = scaleanswers.questions\n  //                 index = questions.indexOf(j)\n  //                 if (index == -1)\n  //                     questions.push(j)\n  //                 else\n  //                     questions.splice(index, 1)\n  //             }\n  //             else\n  //                 questions.push(j)\n  //\n  //             questions.sort((a, b) => a > b ? 1 : -1)\n  //             scaleanswers.questions = questions\n  //         }\n  //\n  //         data.scaleanswers[i] = scaleanswers\n  //         setTestData({...testData, data})\n  //     }\n  //\n  //     const colorBackground = (e, el, i, j, c, side) => {\n  //         try {\n  //             let color\n  //             switch (c) {\n  //                 case 'red':\n  //                     if (side) document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: linear-gradient(90deg, #ffffff 0%, #fbe7d6 100%);';\n  //                     else document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: linear-gradient(90deg, #fbe7d6 0%, #ffffff 100%);';\n  //                     break;\n  //\n  //                 case 'white':\n  //                     document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: inherit;';\n  //                     break;\n  //             }\n  //         }\n  //         catch (e) {}\n  //     }\n  //\n  //\n  //     useEffect(() => {\n  //         document.body.style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: #FFFFFF;'\n  //         fetchTest()\n  //         console.log(testData)\n  //     }, [])\n  //\n  //     useEffect(() => {\n  //         // setInterval(() => {console.log('hi')}, 1000)\n  //     }, [])\n  //\n  //\n  //     return (\n  //         // <div className = 'soft_appearing'>\n  //         <div className = 'addingTest'>\n  //\n  //             <h1>{testData.name}</h1>\n  //\n  //             <div className = 'addingTestModule'>\n  //                 <h2>Название методики</h2>\n  //                 {   testData.name !== 'Без названия' &&\n  //                 <input type = 'text' name = 'name' value = {testData.name} placeholder = 'Название методики' onChange = {e => changeHandler(e)}/>}\n  //                 {   testData.name === 'Без названия' &&\n  //                 <input type = 'text' name = 'name' value = '' placeholder = 'Название методики' onChange = {e => changeHandler(e)}/>}\n  //\n  //\n  //\n  //                 <div className = 'shortLinkBox'>\n  //                     <p>Краткая ссылка: </p>\n  //                     <input type = 'text' name = 'link' value = {testData.link} placeholder = 'Краткая ссылка' onChange = {e => changeHandler(e)}/>\n  //                 </div>\n  //             </div>\n  //\n  //             <div className = 'addingTestModule'>\n  //                 <h2>Краткое описание</h2>\n  //                 <textarea name = 'shortDescription' value = {testData.shortDescription} placeholder = 'Краткое описание методики будет отображаться на странице со всеми методиками' onChange = {e => changeHandler(e)}/>\n  //             </div>\n  //\n  //             <div className = 'addingTestModule'>\n  //                 <h2>Описание</h2>\n  //                 <textarea name = 'description' value = {testData.description} placeholder = 'Полное описание методики будет отображаться на странице методики' onChange = {e => changeHandler(e)}/>\n  //             </div>\n  //\n  //\n  //             <div className = 'addingTestModule'>\n  //                 <h2>Варианты ответов</h2>\n  //             </div>\n  //\n  //             <div className = 'addingTestModule'>\n  //                 <div className = 'answersAdd'>\n  //                     {\n  //                         testData.answers.map((answer, i) => {\n  //                             return(\n  //                                 <div className = 'questionAdd' key = {i}>\n  //                                     <p>{ (i + 1) }</p>\n  //                                     <input type = 'text' name = {'a' + i} id = {'a' + i} placeholder = 'Вариант ответа ' value = {testData.answers[i]} onChange = { e => changeAnswersHandler(e, i) }/>\n  //                                     <CancelIcon onMouseEnter = {e => colorBackground(e, 'a', i, '', 'red', false)} onMouseLeave = {e => colorBackground(e, 'a', i, '', 'white', false)} onClick = { e => handleDeletingAnswer(e, i) } titile = 'Убрать этот вариант ответа'/>\n  //                                 </div>)\n  //                         })\n  //                     }\n  //                 </div>\n  //                 <div onClick = { e => handleAddingAnswer(e) } className = 'adding'>\n  //                     <AddIcon title = 'Новый вариант ответа'/>\n  //                     <p className = {textStatus(false)}>Ещё один вариант ответа</p>\n  //                 </div>\n  //             </div>\n  //\n  //             <div className = 'addingTestModule'>\n  //                 <h2>Вопросы</h2>\n  //             </div>\n  //\n  //             <div className = 'addingTestModule'>\n  //                 <div className = 'questionsAdd'>\n  //                     {\n  //                         testData.questions.map((question, i) => {\n  //                             return(\n  //                                 <div className = 'questionAdd' key = {i}>\n  //                                     <p>{ (i + 1) }</p>\n  //                                     <input type = 'text' name = {'q' + i} id = {'q' + i} placeholder = 'Текст вопроса ' value = {testData.questions[i]} onChange = { e => changeQuestionsHandler(e, i) }/>\n  //                                     <CancelIcon onMouseEnter = {e => colorBackground(e, 'q', i, '', 'red', false)} onMouseLeave = {e => colorBackground(e, 'q', i, '', 'white', false)} onClick = { e => handleDeletingQuestion(e, i) } titile = 'Убрать этот вопрос'/>\n  //                                 </div>)\n  //                         })\n  //                     }\n  //                 </div>\n  //                 <div onClick = { e => handleAddingQuestion(e) } className = 'adding'>\n  //                     <AddIcon title = 'Новый вариант ответа'/>\n  //                     <p className = {textStatus(false)}>Ещё один вопрос</p>\n  //                 </div>\n  //             </div>\n  //\n  //\n  //\n  //             <div className = 'addingTestModule'>\n  //                 <h2>Шкалы</h2>\n  //                 <div className = 'addingTestModule'>\n  //                     <p>Шкальные интервалы – это бываоыаыдйуж ваьыладыыьвдfsddsdffsdsdfsfdfdfdssfdsfdsdfsdfdа ываsdjskdjflkdsjfklsdjklfsdjlfksdjлы. Вдлывалад жавдыаж</p>\n  //                 </div>\n  //\n  //                 <div className = 'scales'>\n  //                     {\n  //                         testData.scales.map((scale, i) => {\n  //                             return(\n  //                                 <div className = 'scaleBox' id = {'scale' + i}>\n  //                                     <CancelIcon id = 'scaleDeletingIcon' onClick = { e => handleDeletingScale(e, i) } titile = 'Убрать эту шкалу'\n  //                                                 onMouseEnter = {e => colorBackground(e, 'scale', i, '', 'red', true)} onMouseLeave = {e => colorBackground(e, 'scale',  i, '', 'white', true)}/>\n  //                                     <div className = 'scale soft_appearing' key = {i}>\n  //                                         <input type = 'text' name = 'name' placeholder = {'Название шкалы ' + (i + 1)}  value = {scale.name} onChange = { e => changeScaleHandler(e, i) }/>\n  //\n  //                                     </div>\n  //                                     <div className = 'intervals'>\n  //                                         {   scale.intervals.map((interval, j) => {\n  //                                             return (\n  //                                                 <div className = 'interval soft_appearing' id = {'interval' + i + j} key = {j}>\n  //                                                     <CancelIcon onMouseEnter = {e => colorBackground(e, 'interval', i, j, 'red', true)} onMouseLeave = {e => colorBackground(e, 'interval', i, j, 'white', true)} className = 'cancelIcon' id = 'intervalDeletingIcon' onClick = { e => handleDeletingInterval(e, i, j) } titile = 'Убрать этот интервал'/>\n  //                                                     <input type = 'text' id = 'intervalName' name = 'name' value = {interval.name} placeholder = {'Интервал ' + (j + 1)} onChange = { e => changeIntervalHandler(e, i, j) }/>\n  //\n  //                                                     <p id = 'intervalP'>Интервал означает нарушение, выход за пределы нормы?</p>\n  //\n  //                                                     <div id = 'isImportantYesContainer'>\n  //                                                         <div id = 'isImportantYes' className = { isImportantBtn(interval.important) } onClick = { e => changeIntervalHandler(e, i, j) }/>\n  //                                                         <p className = {textStatus(interval.important)} onClick = { e => changeIntervalHandler(e, i, j) }>Да</p>\n  //                                                     </div>\n  //                                                     <div id = 'isImportantNoContainer'>\n  //                                                         <div id = 'isImportantNo' className = { isImportantBtn(!interval.important) } onClick = { e => changeIntervalHandler(e, i, j) }/>\n  //                                                         <p className = {textStatus(!interval.important)} onClick = { e => changeIntervalHandler(e, i, j) }>Нет</p>\n  //                                                     </div>\n  //\n  //\n  //                                                     <textarea id = 'intervalDescription' name = 'description' value = {interval.description} placeholder = 'Комментарий' onChange = { e => changeIntervalHandler(e, i, j) }/>\n  //\n  //                                                     <p id = 'intervalP2'>Сколько баллов по шкале нужно набрать, чтобы попасть в интервал?</p>\n  //\n  //                                                     <div id = 'intervalMin'>\n  //                                                         <p>От </p>\n  //                                                         <input type = 'number' name = 'min' value = {interval.min} placeholder = 'баллов' onChange = { e => changeIntervalHandler(e, i, j) }/>\n  //                                                     </div>\n  //\n  //                                                     <div id = 'intervalMax'>\n  //                                                         <p>До </p>\n  //                                                         <input type = 'number' name = 'max' value = {interval.max} placeholder = 'баллов' onChange = { e => changeIntervalHandler(e, i, j) }/>\n  //                                                     </div>\n  //                                                 </div>)})}\n  //                                         <div className = 'adding' onClick = { e => handleAddingInterval(e, i) }>\n  //                                             <AddIcon title = 'Новый интервал'/>\n  //                                             <p className = {textStatus(false)}>Ещё один интервал</p>\n  //                                         </div>\n  //                                     </div>\n  //\n  //                                     <div id = 'scaleAnswers'>\n  //                                         {\n  //                                             testData.answers[0] &&\n  //                                             testData.answers.map((answer, i) => {\n  //                                                 return (\n  //                                                     <div key = {i}>\n  //                                                         <p>На какие вопросы нужно ответить \"{answer}\"?</p>\n  //                                                         <div className = 'scaleAnswer'>\n  //                                                             {   testData.questions[0] &&\n  //                                                             testData.questions.map((q, j) => {\n  //                                                                 return (\n  //                                                                     <div\n  //                                                                         className = { isImportantBtn( testData.scaleanswers[i] && testData.scaleanswers[i].questions.includes(j)) }\n  //                                                                         onClick = { e => changeScaleAnswersHandler(e, i, j) } key = {j}>\n  //                                                                         <p>{(j + 1)}</p>\n  //                                                                     </div>)\n  //                                                             })}\n  //                                                         </div>\n  //                                                         {\n  //                                                             testData.scaleanswers[i] &&\n  //                                                             <div>\n  //                                                                 <p>На сколько будут умножаться баллы от ответа \"{answer}\"?</p>\n  //                                                                 <input type = 'number' name = 'k' placeholder = 'Коэффициент' min = '1' value = {testData.scaleanswers[i].k} onChange = { e => changeScaleAnswersHandler(e, i, null) }/>\n  //                                                             </div>\n  //                                                         }\n  //                                                     </div>)})\n  //                                         }\n  //                                     </div>\n  //                                 </div>\n  //                             )})}\n  //                 </div>\n  //\n  //                 <div id = 'scaleAddingIcon' className = 'adding' onClick = { e => handleAddingScale(e) }>\n  //                     <AddIcon title = 'Новая шкала'/>\n  //                     <p className = {textStatus(false)}>Ещё одна шкала</p>\n  //                 </div>\n  //             </div>\n  //\n  //             <div className = 'savebtn' value = 'Ок' onClick = {e => handleSaving(e)}></div>\n  //\n  //         </div>\n  //\n  //\n  //     )\n  // }\n  //\n  const testlink = useParams().link;\n  const {\n    token\n  } = useContext(AuthContext);\n  const {\n    request\n  } = useHttp();\n  const [errors, setErrors] = useState({\n    name: '',\n    link: ''\n  });\n  const [saveBtnClasses, setSaveBtnClasses] = useState({\n    test: 'invisible'\n  });\n  const [testData, setTestData] = useState({\n    name: '',\n    link: '',\n    shortDescription: '',\n    description: '',\n    scales: [{\n      name: '',\n      intervals: [{\n        name: '',\n        description: '',\n        min: '',\n        max: '',\n        important: false\n      }],\n      scaleanswers: [{\n        k: '',\n        questions: []\n      }]\n    }],\n    questions: [''],\n    answers: ['']\n  });\n\n  const handleSaveBtnClasses = (e, test) => {\n    e.preventDefault();\n    let testClass;\n    if (!test) testClass = 'invisible';else testClass = 'slow_appearing';\n    setSaveBtnClasses({\n      test: testClass\n    });\n  };\n\n  const isImportantBtn = isImportant => {\n    return classNames({\n      inactiveImportantBtn: !isImportant,\n      activeImportantBtn: isImportant\n    });\n  };\n\n  const saveDraftBtnClasses = isImportant => {\n    return classNames({\n      inactiveImportantBtn: !isImportant,\n      activeImportantBtn: isImportant\n    });\n  };\n\n  const textStatus = isActive => {\n    return classNames({\n      inactiveText: !isActive,\n      activeText: isActive\n    });\n  }; // const fetchDrafts = useCallback(async() => {\n  //     try {\n  //         const fetched = await request('addtest/drafts', 'GET', null, {\n  //             Authorization: `Bearer ${token}`\n  //         })\n  //         setDrafts(fetched)\n  //     }\n  //     catch (e) {}\n  // }, [token, request])\n\n\n  const fetchTest = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/tests/${testlink}/full`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      console.log(fetched);\n      setTestData(fetched);\n    } catch (e) {}\n  }, [token, request]);\n\n  const handleSaving = async (e, type) => {\n    e.preventDefault();\n    await saveTest();\n  }; // const saveTestDraft = async() => {\n  //     if (await checkFields(false)) {\n  //         console.log(testData)\n  //         const data = await request('addtest/savedraft', 'POST', {...testData, date: new Date()})\n  //         if (data.message === 'Draft is saved') {\n  //             notify('Черновик сохранён')\n  //             setTestData({...testData, _id: data.id})\n  //             fetchDrafts()\n  //         }\n  //     }\n  // }\n\n\n  const saveTest = async () => {\n    if (await checkFields(true)) {\n      console.log(testData);\n      const data = await request('addtest/savetest', 'POST', { ...testData,\n        date: new Date()\n      });\n\n      if (data.message === 'Test is saved') {\n        notify('Тест сохранён');\n        setTestData({ ...testData,\n          _id: data.id\n        });\n      }\n    }\n  };\n\n  const checkFields = async doubleCheck => {\n    let permission = false;\n\n    try {\n      let name = '',\n          link = '';\n\n      if (testData.name && !RegExps.testNameRegExp.test(testData.name)) {\n        name = 'Допустима только кириллица, пробелы и знаки препинания';\n        await showError(true, 'testName', 'errorTestName');\n      } else if (!testData.name) {\n        name = 'Введите название методики';\n        !doubleCheck && notify('Введите название методики, чтобы сохранить черновик');\n        await showError(true, 'testName', 'errorTestName');\n      }\n\n      if (testData.link && !RegExps.linkRegExp.test(testData.link)) {\n        if (name) {\n          testData.link = '';\n        } else if (!name) {\n          link = 'Допустимы только буквы a-z, цифры и дефис между ними';\n          await showError(true, 'testLink', 'errorTestLink');\n        }\n      } else if (!testData.link) {\n        if (!name) testData.link = createShortLink(testData.name);else testData.link = '';\n      }\n\n      await setErrors({\n        name,\n        link\n      });\n      !name && (await showError(false, 'testName', 'errorTestName'));\n      !link && (await showError(false, 'testLink', 'errorTestLink'));\n      if (!name && !link) permission = true;\n      let check = '';\n      if (!testData.name) check += 'n';\n      if (!testData.questions[0]) check += 'q';\n      if (!testData.answers[0]) check += 'a';\n\n      if (doubleCheck) {\n        switch (check) {\n          case 'nqa':\n            notify('Введите название методики, хотя бы один вопрос и вариант ответа');\n            break;\n\n          case 'qa':\n            notify('Введите хотя бы один вопрос и вариант ответа');\n            break;\n\n          case 'nq':\n            notify('Введите название методики и хотя бы один вопрос');\n            break;\n\n          case 'na':\n            notify('Введите название методики и хотя бы один вариант ответа');\n            break;\n\n          case 'q':\n            notify('Введите хотя бы один вопрос');\n            break;\n\n          case 'a':\n            notify('Введите хотя бы один вариант ответа');\n            break;\n        }\n\n        if (check !== '') permission = false;\n      }\n\n      return permission;\n    } catch (e) {}\n  }; // const chooseDraft = e => {\n  //     e.preventDefault()\n  //     setTestData(drafts[e.target.value])\n  // }\n\n\n  const changeHandler = async e => {\n    e.preventDefault();\n\n    if (e.target.name === 'name') {\n      let link = createShortLink(e.target.value);\n      await setTestData({ ...testData,\n        [e.target.name]: e.target.value,\n        link\n      });\n    } else await setTestData({ ...testData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleAddingScale = e => {\n    e.preventDefault();\n    const scales = testData.scales;\n    scales.push({\n      name: '',\n      intervals: [{\n        name: '',\n        description: '',\n        min: '',\n        max: '',\n        important: false\n      }],\n      scaleanswers: [{\n        k: '',\n        questions: []\n      }]\n    });\n    setTestData({ ...testData,\n      scales\n    });\n  };\n\n  const handleDeletingScale = (e, i) => {\n    e.preventDefault();\n    let scales = testData.scales;\n    scales.splice(i, 1);\n    setTestData({ ...testData,\n      scales\n    });\n    if (scales.length == 0) handleAddingScale(e);\n  };\n\n  const handleAddingInterval = (e, i) => {\n    e.preventDefault();\n    let scales = testData.scales;\n    let intervals = scales[i]['intervals'];\n    intervals.push({\n      name: '',\n      description: '',\n      min: '',\n      max: '',\n      important: false\n    });\n    scales['intervals'] = intervals;\n    setTestData({ ...testData,\n      scales\n    });\n  };\n\n  const handleDeletingInterval = (e, i, j) => {\n    e.preventDefault();\n    let scales = testData.scales;\n    let intervals = scales[i]['intervals'];\n    intervals.splice(j, 1);\n    scales['intervals'] = intervals;\n    setTestData({ ...testData,\n      scales\n    });\n    if (intervals.length == 0) handleAddingInterval(e, i);\n  };\n\n  const handleAddingAnswer = e => {\n    e.preventDefault();\n    const answers = testData.answers;\n    answers.push(e.target.value);\n    setTestData({ ...testData,\n      answers\n    });\n  };\n\n  const handleDeletingAnswer = (e, i) => {\n    e.preventDefault();\n    let answers = testData.answers;\n    answers.splice(i, 1);\n    setTestData({ ...testData,\n      answers\n    });\n    if (answers.length == 0) handleAddingAnswer(e);\n  };\n\n  const handleAddingQuestion = e => {\n    e.preventDefault();\n    const questions = testData.questions;\n    questions.push(e.target.value);\n    setTestData({ ...testData,\n      questions\n    });\n  };\n\n  const handleDeletingQuestion = (e, i) => {\n    e.preventDefault();\n    let questions = testData.questions;\n    questions.splice(i, 1);\n    setTestData({ ...testData,\n      questions\n    });\n    if (questions.length == 0) handleAddingQuestion(e);\n  };\n\n  const changeScaleHandler = (e, i) => {\n    let scales = testData.scales;\n    scales[i][e.target.name] = e.target.value;\n    setTestData({ ...testData,\n      scales\n    });\n  };\n\n  const changeIntervalHandler = (e, i, j) => {\n    e.preventDefault();\n    let scales = testData.scales;\n    let intervals = scales[i]['intervals']; // if (e.target.id === 'isImportantYes' || e.target.id === 'isImportantNo' || e.target.id === 'isImportantP')\n\n    if (e.target.id === 'isImportantYes' || e.target.id === 'isImportantNo') intervals[j]['important'] = !intervals[j]['important'];else if (e.target.name === 'min' || e.target.name === 'max') intervals[j][e.target.name] = parseInt(e.target.value);else intervals[j][e.target.name] = e.target.value;\n    scales[i]['intervals'] = intervals;\n    setTestData({ ...testData,\n      scales\n    });\n  };\n\n  const changeAnswersHandler = (e, i) => {\n    e.preventDefault();\n    let answers = testData.answers;\n    answers[i] = e.target.value;\n    setTestData({ ...testData,\n      answers\n    });\n  };\n\n  const changeQuestionsHandler = (e, i) => {\n    e.preventDefault();\n    let questions = testData.questions;\n    questions[i] = e.target.value;\n    setTestData({ ...testData,\n      questions\n    });\n  };\n\n  const changeScaleAnswersHandler = (e, i, j, k) => {\n    e.preventDefault();\n\n    try {\n      let data = testData;\n      let scale = data.scales[i];\n      let questions = [],\n          index,\n          scaleanswers = [];\n      if (scale.scaleanswers[j]) scaleanswers = scale.scaleanswers[j];else scaleanswers = {};\n      if (e.target.name === 'k') scaleanswers.k = parseInt(e.target.value);else {\n        if (scaleanswers.questions) {\n          questions = scaleanswers.questions;\n          index = questions.indexOf(k);\n          if (index == -1) questions.push(k);else questions.splice(index, 1);\n        } else questions.push(k);\n\n        questions.sort((a, b) => a > b ? 1 : -1);\n        scaleanswers.questions = questions;\n      }\n      scale.scaleanswers[j] = scaleanswers;\n      data.scales[i] = scale;\n      setTestData({ ...testData,\n        data\n      });\n    } catch (e) {}\n  };\n\n  const colorBackground = (e, el, i, j, c, side) => {\n    try {\n      let color;\n\n      switch (c) {\n        case 'red':\n          if (side) document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: linear-gradient(90deg, #ffffff 0%, #fbe7d6 100%);';else document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: linear-gradient(90deg, #fbe7d6 0%, #ffffff 100%);';\n          break;\n\n        case 'white':\n          document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: inherit;';\n          break;\n      }\n    } catch (e) {}\n  };\n\n  useEffect(() => {\n    document.body.style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: #FFFFFF;'; // document.addEventListener('keydown', e => handleKeyDown(e))\n  }, []); // const handleKeyDown = async (e) => {\n  //     if (e.code === 'KeyS' && e.key === 's' && e.which == 83)\n  //         await saveTestDraft()\n  //     alert('code: '+e.code+' key: '+  e.key+' which: '+ e.which)\n  // }\n  // useEffect(() => {\n  //     if (fromDrafts && !drafts){\n  //         fetchDrafts()\n  //     }\n  //     else if (!fromDrafts && drafts && testData.name){\n  //         saveTestDraft()\n  //         fetchDrafts()\n  //         setTestData({\n  //             name: '',\n  //             link: '',\n  //             shortDescription: '',\n  //             description: '',\n  //             scales: [{\n  //                 name: '' ,\n  //                 intervals: [{\n  //                     name: '',\n  //                     description: '',\n  //                     min: '',\n  //                     max: '',\n  //                     important: false\n  //                 }],\n  //                 scaleanswers: [{\n  //                     k: '',\n  //                     questions: []\n  //                 }]\n  //             }\n  //             ],\n  //             questions: [''],\n  //             answers: ['']\n  //         })\n  //     }\n  // }, [fromDrafts])\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (testData.name) saveTest();\n    }, 20000);\n    return () => clearInterval(interval);\n  }, [testData.name, testData.shortDescription, testData.description]);\n  useEffect(() => {\n    fetchTest();\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addingTest\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 9\n    }\n  });\n};\nexport default EditTest;","map":{"version":3,"sources":["/Users/alisakrylova/Intro/client/src/components/EditTest.js"],"names":["React","useCallback","useContext","useEffect","useState","useParams","classNames","AuthContext","createShortLink","useHttp","notify","showError","RegExps","EditTest","testlink","link","token","request","errors","setErrors","name","saveBtnClasses","setSaveBtnClasses","test","testData","setTestData","shortDescription","description","scales","intervals","min","max","important","scaleanswers","k","questions","answers","handleSaveBtnClasses","e","preventDefault","testClass","isImportantBtn","isImportant","inactiveImportantBtn","activeImportantBtn","saveDraftBtnClasses","textStatus","isActive","inactiveText","activeText","fetchTest","fetched","Authorization","console","log","handleSaving","type","saveTest","checkFields","data","date","Date","message","_id","id","doubleCheck","permission","testNameRegExp","linkRegExp","check","changeHandler","target","value","handleAddingScale","push","handleDeletingScale","i","splice","length","handleAddingInterval","handleDeletingInterval","j","handleAddingAnswer","handleDeletingAnswer","handleAddingQuestion","handleDeletingQuestion","changeScaleHandler","changeIntervalHandler","parseInt","changeAnswersHandler","changeQuestionsHandler","changeScaleAnswersHandler","scale","index","indexOf","sort","a","b","colorBackground","el","c","side","color","document","getElementById","style","body","interval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport {useParams} from \"react-router-dom\"\nimport classNames from 'classnames/bind'\nimport './Appearence/index.css'\nimport './Appearence/AddTest.css'\nimport {AuthContext} from \"./Context/AuthContext\";\nimport createShortLink from \"./Functions and const/CreateShortLink\";\nimport {useHttp} from \"../Hooks/http.hook\";\nimport {ReactComponent as AddIcon} from \"./Appearence/Images/AddIcon.svg\"\nimport {ReactComponent as CancelIcon} from \"./Appearence/Images/CancelIcon.svg\"\nimport notify from './Functions and const/Notify'\nimport showError from './Functions and const/ShowError'\nimport {RegExps} from \"./Functions and const/RegExps\";\n\n\nexport const EditTest = () => {\n\n    // const testlink = useParams().link\n//\n//     const {token} = useContext(AuthContext)\n//     const {request} = useHttp();\n//\n//     const [testData, setTestData] = useState({\n//         name: '',\n//         link: '',\n//         shortDescription: '',\n//         description: '',\n//         scales: [{\n//             name: '' ,\n//             k: '',\n//             intervals: [{\n//                 name: '',\n//                 description: '',\n//                 min: '',\n//                 max: '',\n//                 important: false\n//             }]\n//         }\n//         ],\n//         questions: [''],\n//         answers: [''],\n//         scaleanswers: [{\n//             k: '',\n//             questions: []\n//         }]\n//     })\n//\n//     const isImportantBtn = isImportant => {\n//         return classNames({inactiveImportantBtn: !isImportant, activeImportantBtn: isImportant})\n//     }\n//     const textStatus = isActive => {\n//         return classNames({inactiveText: !isActive, activeText: isActive})\n//     }\n//\n//     const fetchTest = useCallback(async() => {\n//         try {\n//             const fetched = await request(`/api/tests/${testlink}`, 'GET', null, {\n//                 Authorization: `Bearer ${token}`\n//             })\n//             console.log(fetched)\n//             setTestData(fetched)\n//         }\n//         catch (e) {}\n//     }, [token, request])\n//\n//     const handleSaving = async(e) => {\n//         e.preventDefault()\n//         // await saveTestDraft()\n//         await saveTest()\n//     }\n//\n//     const saveTestDraft = async() => {\n//         const data = await request('addtest/savedraft', 'POST', {...testData, date: new Date()})\n//         if (data.message === 'Draft is saved') notify('Черновик сохранён')\n//     }\n//\n//     const saveTest = async() => {\n//         const data = await request('addtest/savetest', 'POST', {...testData, date: new Date()})\n//         if (data.message === 'Test is saved') notify('Тест сохранён')\n//     }\n//\n//     const changeHandler = e => {\n//         e.preventDefault()\n//         if (e.target.name === 'name') {\n//             let link = createShortLink(e.target.value)\n//             setTestData({...testData, [e.target.name]: e.target.value, link})\n//         }\n//         else setTestData({...testData, [e.target.name]: e.target.value})\n//     }\n//\n//     const handleAddingScale = e => {\n//         e.preventDefault()\n//         const scales = testData.scales\n//         scales.push({\n//             name: '' ,\n//             k: '',\n//             intervals: [{\n//                 name: '',\n//                 description: '',\n//                 min: '',\n//                 max: '',\n//                 important: false\n//             }]\n//         })\n//         setTestData({...testData, scales})\n//     }\n//\n//     const handleDeletingScale = (e, i) => {\n//         e.preventDefault()\n//         let scales = testData.scales\n//         scales.splice(i, 1)\n//         setTestData({...testData, scales})\n//         if (scales.length == 0) handleAddingScale(e)\n//     }\n//\n//     const handleAddingInterval = (e, i) => {\n//         e.preventDefault()\n//         let scales = testData.scales\n//         let intervals = scales[i]['intervals']\n//         intervals.push({\n//             name: '',\n//             description: '',\n//             min: '',\n//             max: '',\n//             important: false\n//         })\n//         scales['intervals'] = intervals\n//         setTestData({...testData, scales})\n//     }\n//\n//     const handleDeletingInterval = (e, i, j) => {\n//         e.preventDefault()\n//         let scales = testData.scales\n//         let intervals = scales[i]['intervals']\n//         intervals.splice(j, 1)\n//         scales['intervals'] = intervals\n//         setTestData({...testData, scales})\n//         if (intervals.length == 0) handleAddingInterval(e, i)\n//     }\n//\n//     const handleAddingAnswer = e => {\n//         e.preventDefault()\n//         const answers = testData.answers\n//         answers.push(e.target.value)\n//         setTestData({...testData, answers})\n//     }\n//\n//     const handleDeletingAnswer = (e, i) => {\n//         e.preventDefault()\n//         let answers = testData.answers\n//         answers.splice(i, 1)\n//         setTestData({...testData, answers})\n//         if (answers.length == 0) handleAddingAnswer(e)\n//     }\n//\n//     const handleAddingQuestion = e => {\n//         e.preventDefault()\n//         const questions = testData.questions\n//         questions.push(e.target.value)\n//         setTestData({...testData, questions})\n//     }\n//\n//     const handleDeletingQuestion = (e, i) => {\n//         e.preventDefault()\n//         let questions = testData.questions\n//         questions.splice(i, 1)\n//         setTestData({...testData, questions})\n//         if (questions.length == 0) handleAddingQuestion(e)\n//     }\n//\n//     const changeScaleHandler = (e, i) => {\n//         let scales = testData.scales\n//         scales[i][e.target.name] = e.target.value\n//         setTestData({...testData, scales})\n//     }\n//\n//     const changeIntervalHandler = (e, i, j) => {\n//         e.preventDefault()\n//         let scales = testData.scales\n//         let intervals = scales[i]['intervals']\n//\n//         if (e.target.id === 'isImportantYes' || e.target.id === 'isImportantNo' || e.target.id === 'isImportantP')\n//             intervals[j]['important'] = !intervals[j]['important']\n//\n//         else\n//             intervals[j][e.target.name] = e.target.value\n//\n//         scales[i]['intervals'] = intervals\n//         setTestData({...testData, scales})\n//     }\n//\n//     const changeAnswersHandler = (e, i) => {\n//         e.preventDefault()\n//         let answers = testData.answers\n//         answers[i] = e.target.value\n//         setTestData({...testData, answers})\n//     }\n//\n//     const changeQuestionsHandler = (e, i) => {\n//         e.preventDefault()\n//         let questions = testData.questions\n//         questions[i] = e.target.value\n//         setTestData({...testData, questions})\n//     }\n//\n//     const changeScaleAnswersHandler = (e, i, j) => {\n//         e.preventDefault()\n//         let data = testData\n//         let questions = [], index, scaleanswers = {\n//             k: 1,\n//             questions: []\n//         }\n//\n//         if (data.scaleanswers[i])\n//             scaleanswers = data.scaleanswers[i]\n//\n//         if (e.target.name === 'k')\n//             scaleanswers.k = e.target.value\n//\n//         else {\n//\n//             if (scaleanswers.questions) {\n//                 questions = scaleanswers.questions\n//                 index = questions.indexOf(j)\n//                 if (index == -1)\n//                     questions.push(j)\n//                 else\n//                     questions.splice(index, 1)\n//             }\n//             else\n//                 questions.push(j)\n//\n//             questions.sort((a, b) => a > b ? 1 : -1)\n//             scaleanswers.questions = questions\n//         }\n//\n//         data.scaleanswers[i] = scaleanswers\n//         setTestData({...testData, data})\n//     }\n//\n//     const colorBackground = (e, el, i, j, c, side) => {\n//         try {\n//             let color\n//             switch (c) {\n//                 case 'red':\n//                     if (side) document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: linear-gradient(90deg, #ffffff 0%, #fbe7d6 100%);';\n//                     else document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: linear-gradient(90deg, #fbe7d6 0%, #ffffff 100%);';\n//                     break;\n//\n//                 case 'white':\n//                     document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: inherit;';\n//                     break;\n//             }\n//         }\n//         catch (e) {}\n//     }\n//\n//\n//     useEffect(() => {\n//         document.body.style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: #FFFFFF;'\n//         fetchTest()\n//         console.log(testData)\n//     }, [])\n//\n//     useEffect(() => {\n//         // setInterval(() => {console.log('hi')}, 1000)\n//     }, [])\n//\n//\n//     return (\n//         // <div className = 'soft_appearing'>\n//         <div className = 'addingTest'>\n//\n//             <h1>{testData.name}</h1>\n//\n//             <div className = 'addingTestModule'>\n//                 <h2>Название методики</h2>\n//                 {   testData.name !== 'Без названия' &&\n//                 <input type = 'text' name = 'name' value = {testData.name} placeholder = 'Название методики' onChange = {e => changeHandler(e)}/>}\n//                 {   testData.name === 'Без названия' &&\n//                 <input type = 'text' name = 'name' value = '' placeholder = 'Название методики' onChange = {e => changeHandler(e)}/>}\n//\n//\n//\n//                 <div className = 'shortLinkBox'>\n//                     <p>Краткая ссылка: </p>\n//                     <input type = 'text' name = 'link' value = {testData.link} placeholder = 'Краткая ссылка' onChange = {e => changeHandler(e)}/>\n//                 </div>\n//             </div>\n//\n//             <div className = 'addingTestModule'>\n//                 <h2>Краткое описание</h2>\n//                 <textarea name = 'shortDescription' value = {testData.shortDescription} placeholder = 'Краткое описание методики будет отображаться на странице со всеми методиками' onChange = {e => changeHandler(e)}/>\n//             </div>\n//\n//             <div className = 'addingTestModule'>\n//                 <h2>Описание</h2>\n//                 <textarea name = 'description' value = {testData.description} placeholder = 'Полное описание методики будет отображаться на странице методики' onChange = {e => changeHandler(e)}/>\n//             </div>\n//\n//\n//             <div className = 'addingTestModule'>\n//                 <h2>Варианты ответов</h2>\n//             </div>\n//\n//             <div className = 'addingTestModule'>\n//                 <div className = 'answersAdd'>\n//                     {\n//                         testData.answers.map((answer, i) => {\n//                             return(\n//                                 <div className = 'questionAdd' key = {i}>\n//                                     <p>{ (i + 1) }</p>\n//                                     <input type = 'text' name = {'a' + i} id = {'a' + i} placeholder = 'Вариант ответа ' value = {testData.answers[i]} onChange = { e => changeAnswersHandler(e, i) }/>\n//                                     <CancelIcon onMouseEnter = {e => colorBackground(e, 'a', i, '', 'red', false)} onMouseLeave = {e => colorBackground(e, 'a', i, '', 'white', false)} onClick = { e => handleDeletingAnswer(e, i) } titile = 'Убрать этот вариант ответа'/>\n//                                 </div>)\n//                         })\n//                     }\n//                 </div>\n//                 <div onClick = { e => handleAddingAnswer(e) } className = 'adding'>\n//                     <AddIcon title = 'Новый вариант ответа'/>\n//                     <p className = {textStatus(false)}>Ещё один вариант ответа</p>\n//                 </div>\n//             </div>\n//\n//             <div className = 'addingTestModule'>\n//                 <h2>Вопросы</h2>\n//             </div>\n//\n//             <div className = 'addingTestModule'>\n//                 <div className = 'questionsAdd'>\n//                     {\n//                         testData.questions.map((question, i) => {\n//                             return(\n//                                 <div className = 'questionAdd' key = {i}>\n//                                     <p>{ (i + 1) }</p>\n//                                     <input type = 'text' name = {'q' + i} id = {'q' + i} placeholder = 'Текст вопроса ' value = {testData.questions[i]} onChange = { e => changeQuestionsHandler(e, i) }/>\n//                                     <CancelIcon onMouseEnter = {e => colorBackground(e, 'q', i, '', 'red', false)} onMouseLeave = {e => colorBackground(e, 'q', i, '', 'white', false)} onClick = { e => handleDeletingQuestion(e, i) } titile = 'Убрать этот вопрос'/>\n//                                 </div>)\n//                         })\n//                     }\n//                 </div>\n//                 <div onClick = { e => handleAddingQuestion(e) } className = 'adding'>\n//                     <AddIcon title = 'Новый вариант ответа'/>\n//                     <p className = {textStatus(false)}>Ещё один вопрос</p>\n//                 </div>\n//             </div>\n//\n//\n//\n//             <div className = 'addingTestModule'>\n//                 <h2>Шкалы</h2>\n//                 <div className = 'addingTestModule'>\n//                     <p>Шкальные интервалы – это бываоыаыдйуж ваьыладыыьвдfsddsdffsdsdfsfdfdfdssfdsfdsdfsdfdа ываsdjskdjflkdsjfklsdjklfsdjlfksdjлы. Вдлывалад жавдыаж</p>\n//                 </div>\n//\n//                 <div className = 'scales'>\n//                     {\n//                         testData.scales.map((scale, i) => {\n//                             return(\n//                                 <div className = 'scaleBox' id = {'scale' + i}>\n//                                     <CancelIcon id = 'scaleDeletingIcon' onClick = { e => handleDeletingScale(e, i) } titile = 'Убрать эту шкалу'\n//                                                 onMouseEnter = {e => colorBackground(e, 'scale', i, '', 'red', true)} onMouseLeave = {e => colorBackground(e, 'scale',  i, '', 'white', true)}/>\n//                                     <div className = 'scale soft_appearing' key = {i}>\n//                                         <input type = 'text' name = 'name' placeholder = {'Название шкалы ' + (i + 1)}  value = {scale.name} onChange = { e => changeScaleHandler(e, i) }/>\n//\n//                                     </div>\n//                                     <div className = 'intervals'>\n//                                         {   scale.intervals.map((interval, j) => {\n//                                             return (\n//                                                 <div className = 'interval soft_appearing' id = {'interval' + i + j} key = {j}>\n//                                                     <CancelIcon onMouseEnter = {e => colorBackground(e, 'interval', i, j, 'red', true)} onMouseLeave = {e => colorBackground(e, 'interval', i, j, 'white', true)} className = 'cancelIcon' id = 'intervalDeletingIcon' onClick = { e => handleDeletingInterval(e, i, j) } titile = 'Убрать этот интервал'/>\n//                                                     <input type = 'text' id = 'intervalName' name = 'name' value = {interval.name} placeholder = {'Интервал ' + (j + 1)} onChange = { e => changeIntervalHandler(e, i, j) }/>\n//\n//                                                     <p id = 'intervalP'>Интервал означает нарушение, выход за пределы нормы?</p>\n//\n//                                                     <div id = 'isImportantYesContainer'>\n//                                                         <div id = 'isImportantYes' className = { isImportantBtn(interval.important) } onClick = { e => changeIntervalHandler(e, i, j) }/>\n//                                                         <p className = {textStatus(interval.important)} onClick = { e => changeIntervalHandler(e, i, j) }>Да</p>\n//                                                     </div>\n//                                                     <div id = 'isImportantNoContainer'>\n//                                                         <div id = 'isImportantNo' className = { isImportantBtn(!interval.important) } onClick = { e => changeIntervalHandler(e, i, j) }/>\n//                                                         <p className = {textStatus(!interval.important)} onClick = { e => changeIntervalHandler(e, i, j) }>Нет</p>\n//                                                     </div>\n//\n//\n//                                                     <textarea id = 'intervalDescription' name = 'description' value = {interval.description} placeholder = 'Комментарий' onChange = { e => changeIntervalHandler(e, i, j) }/>\n//\n//                                                     <p id = 'intervalP2'>Сколько баллов по шкале нужно набрать, чтобы попасть в интервал?</p>\n//\n//                                                     <div id = 'intervalMin'>\n//                                                         <p>От </p>\n//                                                         <input type = 'number' name = 'min' value = {interval.min} placeholder = 'баллов' onChange = { e => changeIntervalHandler(e, i, j) }/>\n//                                                     </div>\n//\n//                                                     <div id = 'intervalMax'>\n//                                                         <p>До </p>\n//                                                         <input type = 'number' name = 'max' value = {interval.max} placeholder = 'баллов' onChange = { e => changeIntervalHandler(e, i, j) }/>\n//                                                     </div>\n//                                                 </div>)})}\n//                                         <div className = 'adding' onClick = { e => handleAddingInterval(e, i) }>\n//                                             <AddIcon title = 'Новый интервал'/>\n//                                             <p className = {textStatus(false)}>Ещё один интервал</p>\n//                                         </div>\n//                                     </div>\n//\n//                                     <div id = 'scaleAnswers'>\n//                                         {\n//                                             testData.answers[0] &&\n//                                             testData.answers.map((answer, i) => {\n//                                                 return (\n//                                                     <div key = {i}>\n//                                                         <p>На какие вопросы нужно ответить \"{answer}\"?</p>\n//                                                         <div className = 'scaleAnswer'>\n//                                                             {   testData.questions[0] &&\n//                                                             testData.questions.map((q, j) => {\n//                                                                 return (\n//                                                                     <div\n//                                                                         className = { isImportantBtn( testData.scaleanswers[i] && testData.scaleanswers[i].questions.includes(j)) }\n//                                                                         onClick = { e => changeScaleAnswersHandler(e, i, j) } key = {j}>\n//                                                                         <p>{(j + 1)}</p>\n//                                                                     </div>)\n//                                                             })}\n//                                                         </div>\n//                                                         {\n//                                                             testData.scaleanswers[i] &&\n//                                                             <div>\n//                                                                 <p>На сколько будут умножаться баллы от ответа \"{answer}\"?</p>\n//                                                                 <input type = 'number' name = 'k' placeholder = 'Коэффициент' min = '1' value = {testData.scaleanswers[i].k} onChange = { e => changeScaleAnswersHandler(e, i, null) }/>\n//                                                             </div>\n//                                                         }\n//                                                     </div>)})\n//                                         }\n//                                     </div>\n//                                 </div>\n//                             )})}\n//                 </div>\n//\n//                 <div id = 'scaleAddingIcon' className = 'adding' onClick = { e => handleAddingScale(e) }>\n//                     <AddIcon title = 'Новая шкала'/>\n//                     <p className = {textStatus(false)}>Ещё одна шкала</p>\n//                 </div>\n//             </div>\n//\n//             <div className = 'savebtn' value = 'Ок' onClick = {e => handleSaving(e)}></div>\n//\n//         </div>\n//\n//\n//     )\n// }\n//\n\n\n\n    const testlink = useParams().link\n\n    const {token} = useContext(AuthContext)\n    const {request} = useHttp();\n\n    const [errors, setErrors] = useState({ name: '', link: '' })\n    const [saveBtnClasses, setSaveBtnClasses] = useState({test: 'invisible'})\n\n    const [testData, setTestData] = useState({\n        name: '',\n        link: '',\n        shortDescription: '',\n        description: '',\n        scales: [{\n            name: '' ,\n            intervals: [{\n                name: '',\n                description: '',\n                min: '',\n                max: '',\n                important: false\n            }],\n            scaleanswers: [{\n                k: '',\n                questions: []\n            }]\n        }],\n        questions: [''],\n        answers: ['']\n    })\n\n    const handleSaveBtnClasses = (e, test) => {\n        e.preventDefault()\n        let testClass\n        if (!test)\n            testClass = 'invisible'\n        else testClass = 'slow_appearing'\n        setSaveBtnClasses({test: testClass})\n    }\n\n    const isImportantBtn = isImportant => {\n        return classNames({inactiveImportantBtn: !isImportant, activeImportantBtn: isImportant})\n    }\n\n    const saveDraftBtnClasses = isImportant => {\n        return classNames({inactiveImportantBtn: !isImportant, activeImportantBtn: isImportant})\n    }\n\n\n    const textStatus = isActive => {\n        return classNames({inactiveText: !isActive, activeText: isActive})\n    }\n\n    // const fetchDrafts = useCallback(async() => {\n    //     try {\n    //         const fetched = await request('addtest/drafts', 'GET', null, {\n    //             Authorization: `Bearer ${token}`\n    //         })\n    //         setDrafts(fetched)\n    //     }\n    //     catch (e) {}\n    // }, [token, request])\n\n\n    const fetchTest = useCallback(async() => {\n        try {\n            const fetched = await request(`/api/tests/${testlink}/full`, 'GET', null, {\n                Authorization: `Bearer ${token}`\n            })\n            console.log(fetched)\n            setTestData(fetched)\n        }\n        catch (e) {}\n    }, [token, request])\n\n    const handleSaving = async(e, type) => {\n        e.preventDefault()\n        await saveTest()\n    }\n\n    // const saveTestDraft = async() => {\n    //     if (await checkFields(false)) {\n    //         console.log(testData)\n    //         const data = await request('addtest/savedraft', 'POST', {...testData, date: new Date()})\n    //         if (data.message === 'Draft is saved') {\n    //             notify('Черновик сохранён')\n    //             setTestData({...testData, _id: data.id})\n    //             fetchDrafts()\n    //         }\n    //     }\n    // }\n\n    const saveTest = async() => {\n        if (await checkFields(true)){\n            console.log(testData)\n            const data = await request('addtest/savetest', 'POST', {...testData, date: new Date()})\n            if (data.message === 'Test is saved') {\n                notify('Тест сохранён')\n                setTestData({...testData, _id: data.id})\n            }\n        }\n    }\n\n    const checkFields = async(doubleCheck) => {\n        let permission = false\n        try {\n\n            let name = '', link = ''\n            if (testData.name && !RegExps.testNameRegExp.test(testData.name)) {\n                name = 'Допустима только кириллица, пробелы и знаки препинания'\n                await showError(true, 'testName', 'errorTestName')\n            }\n            else if (!testData.name) {\n                name = 'Введите название методики'\n                !doubleCheck && notify('Введите название методики, чтобы сохранить черновик')\n                await showError(true, 'testName', 'errorTestName')\n            }\n            if (testData.link && !RegExps.linkRegExp.test(testData.link)) {\n                if (name){\n                    testData.link = ''\n                }\n                else if (!name){\n                    link = 'Допустимы только буквы a-z, цифры и дефис между ними'\n                    await showError(true, 'testLink', 'errorTestLink')\n                }\n            }\n            else if (!testData.link) {\n                if (!name) testData.link = createShortLink(testData.name)\n                else testData.link = ''\n            }\n\n            await setErrors({name, link})\n\n            !name && await showError(false, 'testName', 'errorTestName')\n            !link && await showError(false, 'testLink', 'errorTestLink')\n\n            if (!name && !link)\n                permission = true\n\n            let check = ''\n            if (!testData.name) check += 'n'\n            if (!testData.questions[0]) check += 'q'\n            if (!testData.answers[0]) check += 'a'\n\n            if (doubleCheck){\n                switch (check){\n                    case 'nqa':\n                        notify('Введите название методики, хотя бы один вопрос и вариант ответа');\n                        break;\n                    case 'qa':\n                        notify('Введите хотя бы один вопрос и вариант ответа');\n                        break;\n                    case 'nq':\n                        notify('Введите название методики и хотя бы один вопрос');\n                        break;\n                    case 'na':\n                        notify('Введите название методики и хотя бы один вариант ответа');\n                        break;\n                    case 'q':\n                        notify('Введите хотя бы один вопрос');\n                        break;\n                    case 'a':\n                        notify('Введите хотя бы один вариант ответа');\n                        break;\n                }\n                if (check !== '') permission = false;\n            }\n\n            return permission\n        }\n        catch (e) {}\n    }\n\n    // const chooseDraft = e => {\n    //     e.preventDefault()\n    //     setTestData(drafts[e.target.value])\n    // }\n\n    const changeHandler = async (e) => {\n        e.preventDefault()\n        if (e.target.name === 'name') {\n            let link = createShortLink(e.target.value)\n            await setTestData({...testData, [e.target.name]: e.target.value, link})\n        }\n        else\n            await setTestData({...testData, [e.target.name]: e.target.value})\n    }\n\n    const handleAddingScale = e => {\n        e.preventDefault()\n        const scales = testData.scales\n        scales.push({\n            name: '' ,\n            intervals: [{\n                name: '',\n                description: '',\n                min: '',\n                max: '',\n                important: false\n            }],\n            scaleanswers: [{\n                k: '',\n                questions: []\n            }]\n        })\n        setTestData({...testData, scales})\n    }\n\n    const handleDeletingScale = (e, i) => {\n        e.preventDefault()\n        let scales = testData.scales\n        scales.splice(i, 1)\n        setTestData({...testData, scales})\n        if (scales.length == 0) handleAddingScale(e)\n    }\n\n    const handleAddingInterval = (e, i) => {\n        e.preventDefault()\n        let scales = testData.scales\n        let intervals = scales[i]['intervals']\n        intervals.push({\n            name: '',\n            description: '',\n            min: '',\n            max: '',\n            important: false\n        })\n        scales['intervals'] = intervals\n        setTestData({...testData, scales})\n    }\n\n    const handleDeletingInterval = (e, i, j) => {\n        e.preventDefault()\n        let scales = testData.scales\n        let intervals = scales[i]['intervals']\n        intervals.splice(j, 1)\n        scales['intervals'] = intervals\n        setTestData({...testData, scales})\n        if (intervals.length == 0) handleAddingInterval(e, i)\n    }\n\n    const handleAddingAnswer = e => {\n        e.preventDefault()\n        const answers = testData.answers\n        answers.push(e.target.value)\n        setTestData({...testData, answers})\n    }\n\n    const handleDeletingAnswer = (e, i) => {\n        e.preventDefault()\n        let answers = testData.answers\n        answers.splice(i, 1)\n        setTestData({...testData, answers})\n        if (answers.length == 0) handleAddingAnswer(e)\n    }\n\n    const handleAddingQuestion = e => {\n        e.preventDefault()\n        const questions = testData.questions\n        questions.push(e.target.value)\n        setTestData({...testData, questions})\n    }\n\n    const handleDeletingQuestion = (e, i) => {\n        e.preventDefault()\n        let questions = testData.questions\n        questions.splice(i, 1)\n        setTestData({...testData, questions})\n        if (questions.length == 0) handleAddingQuestion(e)\n    }\n\n    const changeScaleHandler = (e, i) => {\n        let scales = testData.scales\n        scales[i][e.target.name] = e.target.value\n        setTestData({...testData, scales})\n    }\n\n    const changeIntervalHandler = (e, i, j) => {\n        e.preventDefault()\n        let scales = testData.scales\n        let intervals = scales[i]['intervals']\n\n        // if (e.target.id === 'isImportantYes' || e.target.id === 'isImportantNo' || e.target.id === 'isImportantP')\n        if (e.target.id === 'isImportantYes' || e.target.id === 'isImportantNo')\n            intervals[j]['important'] = !intervals[j]['important']\n\n        else if (e.target.name === 'min' || e.target.name === 'max')\n            intervals[j][e.target.name] = parseInt(e.target.value)\n        else\n            intervals[j][e.target.name] = e.target.value\n\n        scales[i]['intervals'] = intervals\n        setTestData({...testData, scales})\n    }\n\n    const changeAnswersHandler = (e, i) => {\n        e.preventDefault()\n        let answers = testData.answers\n        answers[i] = e.target.value\n        setTestData({...testData, answers})\n    }\n\n    const changeQuestionsHandler = (e, i) => {\n        e.preventDefault()\n        let questions = testData.questions\n        questions[i] = e.target.value\n        setTestData({...testData, questions})\n    }\n\n    const changeScaleAnswersHandler = (e, i, j, k) => {\n        e.preventDefault()\n\n        try {\n            let data = testData\n            let scale = data.scales[i]\n            let questions = [], index, scaleanswers = []\n\n            if (scale.scaleanswers[j])\n                scaleanswers = scale.scaleanswers[j]\n            else\n                scaleanswers = {}\n\n            if (e.target.name === 'k')\n                scaleanswers.k = parseInt(e.target.value)\n\n            else {\n                if (scaleanswers.questions) {\n                    questions = scaleanswers.questions\n                    index = questions.indexOf(k)\n                    if (index == -1)\n                        questions.push(k)\n                    else\n                        questions.splice(index, 1)\n                }\n                else\n                    questions.push(k)\n\n                questions.sort((a, b) => a > b ? 1 : -1)\n                scaleanswers.questions = questions\n            }\n\n            scale.scaleanswers[j] = scaleanswers\n            data.scales[i] = scale\n            setTestData({...testData, data})\n        }\n        catch (e) {}\n    }\n\n    const colorBackground = (e, el, i, j, c, side) => {\n        try {\n            let color\n            switch (c) {\n                case 'red':\n                    if (side) document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: linear-gradient(90deg, #ffffff 0%, #fbe7d6 100%);';\n                    else document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: linear-gradient(90deg, #fbe7d6 0%, #ffffff 100%);';\n                    break;\n\n                case 'white':\n                    document.getElementById(el + i + j).style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: inherit;';\n                    break;\n            }\n        }\n        catch (e) {}\n    }\n\n\n    useEffect(() => {\n        document.body.style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: #FFFFFF;'\n        // document.addEventListener('keydown', e => handleKeyDown(e))\n    }, [])\n\n    // const handleKeyDown = async (e) => {\n    //     if (e.code === 'KeyS' && e.key === 's' && e.which == 83)\n    //         await saveTestDraft()\n    //     alert('code: '+e.code+' key: '+  e.key+' which: '+ e.which)\n    // }\n\n    // useEffect(() => {\n    //     if (fromDrafts && !drafts){\n    //         fetchDrafts()\n    //     }\n    //     else if (!fromDrafts && drafts && testData.name){\n    //         saveTestDraft()\n    //         fetchDrafts()\n    //         setTestData({\n    //             name: '',\n    //             link: '',\n    //             shortDescription: '',\n    //             description: '',\n    //             scales: [{\n    //                 name: '' ,\n    //                 intervals: [{\n    //                     name: '',\n    //                     description: '',\n    //                     min: '',\n    //                     max: '',\n    //                     important: false\n    //                 }],\n    //                 scaleanswers: [{\n    //                     k: '',\n    //                     questions: []\n    //                 }]\n    //             }\n    //             ],\n    //             questions: [''],\n    //             answers: ['']\n    //         })\n    //     }\n    // }, [fromDrafts])\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (testData.name)\n                saveTest()\n        }, 20000)\n\n        return () => clearInterval(interval)\n    }, [testData.name, testData.shortDescription, testData.description])\n\n    useEffect(() => {\n        fetchTest()\n    })\n\n    return (\n        <div className = 'addingTest'>\n\n            {/*<h1>Добавить тест</h1>*/}\n\n            {/*<div className = 'addingTestModule'>*/}\n            {/*    <h2>Название методики</h2>*/}\n\n            {/*    <div className = 'inputWithError'>*/}\n            {/*        {   testData.name !== 'Без названия' &&*/}\n            {/*        <input type = 'text' name = 'name' id = 'testName' value = {testData.name} placeholder = 'Название методики' onChange = {e => changeHandler(e)}/>}*/}\n            {/*        {   testData.name === 'Без названия' &&*/}\n            {/*        <input type = 'text' name = 'name' id = 'testName' value = '' placeholder = 'Название методики' onChange = {e => changeHandler(e)}/>}*/}\n            {/*        <p className = 'error' id = 'errorTestName'>{errors.name}</p>*/}\n            {/*    </div>*/}\n\n\n            {/*    <div className = 'shortLinkBox'>*/}\n            {/*        <p>Краткая ссылка: </p>*/}\n            {/*        <input type = 'text' id = 'testLink' name = 'link' value = {testData.link} placeholder = 'Краткая ссылка' onChange = {e => changeHandler(e)}/>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n\n            {/*<div className = 'addingTestModule'>*/}\n            {/*    <h2>Краткое описание</h2>*/}\n            {/*    <textarea name = 'shortDescription' value = {testData.shortDescription} placeholder = 'Краткое описание методики будет отображаться на странице со всеми методиками' onChange = {e => changeHandler(e)}/>*/}\n            {/*</div>*/}\n\n            {/*<div className = 'addingTestModule'>*/}\n            {/*    <h2>Описание</h2>*/}\n            {/*    <textarea name = 'description' value = {testData.description} placeholder = 'Полное описание методики будет отображаться на странице методики' onChange = {e => changeHandler(e)}/>*/}\n            {/*</div>*/}\n\n\n            {/*<div className = 'addingTestModule'>*/}\n            {/*    <h2>Варианты ответов</h2>*/}\n            {/*</div>*/}\n\n            {/*<div className = 'addingTestModule'>*/}\n            {/*    <div className = 'answersAdd'>*/}\n            {/*        {*/}\n            {/*            testData.answers.map((answer, i) => {*/}\n            {/*                return(*/}\n            {/*                    <div className = 'questionAdd' key = {i}>*/}\n            {/*                        <p>{ (i + 1) }</p>*/}\n            {/*                        <input type = 'text' name = {'a' + i} id = {'a' + i} placeholder = 'Вариант ответа ' value = {testData.answers[i]} onChange = { e => changeAnswersHandler(e, i) }/>*/}\n            {/*                        <CancelIcon onMouseEnter = {e => colorBackground(e, 'a', i, '', 'red', false)} onMouseLeave = {e => colorBackground(e, 'a', i, '', 'white', false)} onClick = { e => handleDeletingAnswer(e, i) } titile = 'Убрать этот вариант ответа'/>*/}\n            {/*                    </div>)*/}\n            {/*            })*/}\n            {/*        }*/}\n            {/*    </div>*/}\n            {/*    <div onClick = { e => handleAddingAnswer(e) } className = 'adding'>*/}\n            {/*        <AddIcon title = 'Новый вариант ответа'/>*/}\n            {/*        <p className = {textStatus(false)}>Ещё один вариант ответа</p>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n\n            {/*<div className = 'addingTestModule'>*/}\n            {/*    <h2>Вопросы</h2>*/}\n            {/*</div>*/}\n\n            {/*<div className = 'addingTestModule'>*/}\n            {/*    <div className = 'questionsAdd'>*/}\n            {/*        {*/}\n            {/*            testData.questions.map((question, i) => {*/}\n            {/*                return(*/}\n            {/*                    <div className = 'questionAdd' key = {i}>*/}\n            {/*                        <p>{ (i + 1) }</p>*/}\n            {/*                        <input type = 'text' name = {'q' + i} id = {'q' + i} placeholder = 'Текст вопроса ' value = {testData.questions[i]} onChange = { e => changeQuestionsHandler(e, i) }/>*/}\n            {/*                        <CancelIcon onMouseEnter = {e => colorBackground(e, 'q', i, '', 'red', false)} onMouseLeave = {e => colorBackground(e, 'q', i, '', 'white', false)} onClick = { e => handleDeletingQuestion(e, i) } titile = 'Убрать этот вопрос'/>*/}\n            {/*                    </div>)*/}\n            {/*            })*/}\n            {/*        }*/}\n            {/*    </div>*/}\n            {/*    <div onClick = { e => handleAddingQuestion(e) } className = 'adding'>*/}\n            {/*        <AddIcon title = 'Новый вариант ответа'/>*/}\n            {/*        <p className = {textStatus(false)}>Ещё один вопрос</p>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n\n\n\n            {/*<div className = 'addingTestModule'>*/}\n            {/*    <h2>Шкалы</h2>*/}\n            {/*    <div className = 'addingTestModule'>*/}\n            {/*        <p>Шкальные интервалы – это бываоыаыдйуж ваьыладыыьвдfsddsdffsdsdfsfdfdfdssfdsfdsdfsdfdа ываsdjskdjflkdsjfklsdjklfsdjlfksdjлы. Вдлывалад жавдыаж</p>*/}\n            {/*    </div>*/}\n\n            {/*    <div className = 'scales'>*/}\n            {/*        {*/}\n            {/*            testData.scales &&*/}\n            {/*            testData.scales.map((scale, i) => {*/}\n            {/*                return(*/}\n            {/*                    <div className = 'scaleBox' id = {'scale' + i} key = {i}>*/}\n            {/*                        <CancelIcon className = 'scaleDeletingIcon' onClick = { e => handleDeletingScale(e, i) } titile = 'Убрать эту шкалу'*/}\n            {/*                                    onMouseEnter = {e => colorBackground(e, 'scale', i, '', 'red', true)} onMouseLeave = {e => colorBackground(e, 'scale',  i, '', 'white', true)}/>*/}\n            {/*                        <div className = 'scale soft_appearing' key = {i}>*/}\n            {/*                            <input type = 'text' name = 'name' placeholder = {'Название шкалы ' + (i + 1)}  value = {scale.name} onChange = { e => changeScaleHandler(e, i) }/>*/}\n\n            {/*                        </div>*/}\n            {/*                        <div className = 'intervals'>*/}\n            {/*                            {   scale.intervals.map((interval, j) => {*/}\n            {/*                                return (*/}\n            {/*                                    <div className = 'interval soft_appearing' id = {'interval' + i + j} key = {j}>*/}\n            {/*                                        <CancelIcon className = 'cancelIcon intervalDeletingIcon' onMouseEnter = {e => colorBackground(e, 'interval', i, j, 'red', true)} onMouseLeave = {e => colorBackground(e, 'interval', i, j, 'white', true)} onClick = { e => handleDeletingInterval(e, i, j) } titile = 'Убрать этот интервал'/>*/}\n            {/*                                        <input type = 'text' className = 'intervalName' name = 'name' value = {interval.name} placeholder = {'Интервал ' + (j + 1)} onChange = { e => changeIntervalHandler(e, i, j) }/>*/}\n\n            {/*                                        <p className = 'intervalP'>Интервал означает нарушение, выход за пределы нормы?</p>*/}\n\n            {/*                                        <div className = 'isImportantYesContainer'>*/}\n            {/*                                            <div className = 'isImportantYes' id = 'isImportantYes' className = { isImportantBtn(interval.important) } onClick = { e => changeIntervalHandler(e, i, j) }/>*/}\n            {/*                                            <p className = {textStatus(interval.important)} onClick = { e => changeIntervalHandler(e, i, j) }>Да</p>*/}\n            {/*                                        </div>*/}\n            {/*                                        <div className = 'isImportantNoContainer'>*/}\n            {/*                                            <div className = 'isImportantNo' id = 'isImportantNo' className = { isImportantBtn(!interval.important) } onClick = { e => changeIntervalHandler(e, i, j) }/>*/}\n            {/*                                            <p className = {textStatus(!interval.important)} onClick = { e => changeIntervalHandler(e, i, j) }>Нет</p>*/}\n            {/*                                        </div>*/}\n\n\n            {/*                                        <textarea className = 'intervalDescription' name = 'description' value = {interval.description} placeholder = 'Комментарий' onChange = { e => changeIntervalHandler(e, i, j) }/>*/}\n\n            {/*                                        <p className = 'intervalP2'>Сколько баллов по шкале нужно набрать, чтобы попасть в интервал?</p>*/}\n\n            {/*                                        <div className = 'intervalMin'>*/}\n            {/*                                            <p>От </p>*/}\n            {/*                                            <input type = 'number' name = 'min' value = {interval.min} placeholder = 'баллов' onChange = { e => changeIntervalHandler(e, i, j) }/>*/}\n            {/*                                        </div>*/}\n\n            {/*                                        <div className = 'intervalMax'>*/}\n            {/*                                            <p>До </p>*/}\n            {/*                                            <input type = 'number' name = 'max' value = {interval.max} placeholder = 'баллов' onChange = { e => changeIntervalHandler(e, i, j) }/>*/}\n            {/*                                        </div>*/}\n            {/*                                    </div>)})}*/}\n            {/*                            <div className = 'adding' onClick = { e => handleAddingInterval(e, i) }>*/}\n            {/*                                <AddIcon title = 'Новый интервал'/>*/}\n            {/*                                <p className = {textStatus(false)}>Ещё один интервал</p>*/}\n            {/*                            </div>*/}\n            {/*                        </div>*/}\n\n            {/*                        <div id = 'scaleAnswers'>*/}\n            {/*                            {*/}\n            {/*                                testData.answers[0] &&*/}\n            {/*                                testData.answers.map((answer, j) => {*/}\n            {/*                                    return (*/}\n            {/*                                        <div key = {j}>*/}\n            {/*                                            <p>На какие вопросы нужно ответить \"{answer}\"?</p>*/}\n            {/*                                            <div className = 'scaleAnswer'>*/}\n            {/*                                                {   testData.questions[0] &&*/}\n            {/*                                                testData.questions.map((q, k) => {*/}\n            {/*                                                    return (*/}\n            {/*                                                        <div*/}\n            {/*                                                            title = {q}*/}\n            {/*                                                            className = {*/}\n            {/*                                                                isImportantBtn(*/}\n            {/*                                                                    testData.scales[i].scaleanswers &&*/}\n            {/*                                                                    testData.scales[i].scaleanswers[j] &&*/}\n            {/*                                                                    testData.scales[i].scaleanswers[j].questions &&*/}\n            {/*                                                                    testData.scales[i].scaleanswers[j].questions.includes(k))}*/}\n            {/*                                                            onClick = { e => changeScaleAnswersHandler(e, i, j, k) } key = {k}*/}\n            {/*                                                        >*/}\n            {/*                                                            <p>{(k + 1)}</p>*/}\n            {/*                                                        </div>*/}\n            {/*                                                    )*/}\n            {/*                                                })}*/}\n            {/*                                            </div>*/}\n            {/*                                            {*/}\n            {/*                                                testData.scales[i].scaleanswers[j] &&*/}\n            {/*                                                <div>*/}\n            {/*                                                    <p>На сколько будут умножаться баллы от ответа \"{answer}\"?</p>*/}\n            {/*                                                    <input type = 'number' name = 'k' placeholder = 'Коэффициент' min = '1' value = {testData.scales[i].scaleanswers[j].k} onChange = { e => changeScaleAnswersHandler(e, i, j, null) }/>*/}\n            {/*                                                </div>*/}\n            {/*                                            }*/}\n            {/*                                        </div>)})*/}\n            {/*                            }*/}\n            {/*                        </div>*/}\n            {/*                    </div>*/}\n            {/*                )})}*/}\n            {/*    </div>*/}\n\n            {/*    <div id = 'scaleAddingIcon' className = 'adding' onClick = { e => handleAddingScale(e) }>*/}\n            {/*        <AddIcon title = 'Новая шкала'/>*/}\n            {/*        <p className = {textStatus(false)}>Ещё одна шкала</p>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n\n            {/*<div className = 'savebtns'>*/}\n            {/*    <div className = 'savedraftbtn' onClick = {e => handleSaving(e, 'draft')}*/}\n            {/*         onMouseEnter = {e => handleSaveBtnClasses(e, false, true )}*/}\n            {/*         onMouseLeave = {e => handleSaveBtnClasses(e, false, false )}>*/}\n            {/*        <p className = {saveBtnClasses.draft}> Сохранить черновик</p>*/}\n            {/*    </div>*/}\n            {/*    <div className = 'savetestbtn' onClick = {e => handleSaving(e, 'test')}*/}\n            {/*         onMouseEnter = {e => handleSaveBtnClasses(e, true, false )}*/}\n            {/*         onMouseLeave = {e => handleSaveBtnClasses(e, false, false )}>*/}\n            {/*        <p className = {saveBtnClasses.test}>Сохранить тест</p>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n        </div>\n\n\n    )\n}\n\nexport default EditTest\n"]},"metadata":{},"sourceType":"module"}