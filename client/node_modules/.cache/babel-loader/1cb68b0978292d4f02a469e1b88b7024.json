{"ast":null,"code":"var _jsxFileName = \"/Users/alisakrylova/Intro/client/src/components/TestPage.js\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport './Appearence/index.css';\nimport './Appearence/TestPage.css';\nimport { AuthContext } from \"./Context/AuthContext\";\nimport { useHttp } from \"../Hooks/http.hook\";\nimport { useParams } from 'react-router-dom';\nexport const TestPage = () => {\n  const [test, setTest] = useState({\n    name: '',\n    description: '',\n    shortDescription: ''\n  });\n  const [questions, setQuestions] = useState({});\n  const {\n    token,\n    userID\n  } = useContext(AuthContext);\n  const {\n    loading,\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const link = useParams().id;\n  const fetchTestData = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/tests/${link}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setTest({\n        name: fetched.tests.name,\n        description: fetched.tests.description,\n        shortDescription: fetched.tests.shortDescription\n      });\n      setQuestions(fetched.questions);\n    } catch (e) {}\n  }, [token, request]);\n  useEffect(() => {\n    fetchTestData();\n    console.log(\"USER ID ISSSSSS\", userID);\n  }, [fetchTestData]);\n\n  const clickHandler = (index, value) => {\n    console.log(\"ON THE \" + index + \"th answer you said \" + value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    cls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, test.name), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"testInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, test.shortDescription), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"testInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, test.description), Object.keys(questions).map((key, index) => key !== '_id' && key !== 'testID' && /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"questionCard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    value: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }, questions[key], \" \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    className: \"yesbtn\",\n    value: \"\\u0434\\u0430\",\n    disabled: loading,\n    onClick: clickHandler(index, true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    className: \"nobtn\",\n    value: \"\\u043D\\u0435\\u0442\",\n    disabled: loading,\n    onClick: clickHandler(index, false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/alisakrylova/Intro/client/src/components/TestPage.js"],"names":["React","useCallback","useContext","useEffect","useState","AuthContext","useHttp","useParams","TestPage","test","setTest","name","description","shortDescription","questions","setQuestions","token","userID","loading","request","error","clearError","link","id","fetchTestData","fetched","Authorization","tests","e","console","log","clickHandler","index","value","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport './Appearence/index.css'\nimport './Appearence/TestPage.css'\nimport {AuthContext} from \"./Context/AuthContext\";\nimport {useHttp} from \"../Hooks/http.hook\";\nimport {useParams} from 'react-router-dom'\n\nexport const TestPage = () => {\n\n    const [test, setTest] = useState({ name: '', description: '', shortDescription: ''})\n    const [questions, setQuestions] = useState({})\n    const {token, userID} = useContext(AuthContext)\n    const {loading, request, error, clearError} = useHttp();\n    const link = useParams().id\n\n    const fetchTestData = useCallback(async () => {\n        try {\n            const fetched = await request(`/api/tests/${link}`, 'GET', null, {\n                Authorization: `Bearer ${token}`\n            })\n            setTest({name: fetched.tests.name, description: fetched.tests.description, shortDescription: fetched.tests.shortDescription})\n            setQuestions(fetched.questions)\n        }\n        catch (e) {}\n    }, [token, request])\n\n    useEffect(() => {\n        fetchTestData()\n        console.log(\"USER ID ISSSSSS\", userID)\n    }, [fetchTestData])\n\n    const clickHandler = (index, value) => {\n        console.log(\"ON THE \" + index + \"th answer you said \" + value)\n\n    }\n\n\n    return (\n        <div>\n            <h1 cls>{test.name}</h1>\n            <p className = 'testInfo'>{test.shortDescription}</p>\n            <p className = 'testInfo'>{test.description}</p>\n            {\n                Object.keys(questions).map((key, index) =>\n                    key !== '_id' && key !== 'testID' &&\n                    <div key = {index} className = 'questionCard' >\n                        <p value={key}>{ questions[key] } </p>\n                        <input type='button' className = 'yesbtn'  value = 'да' disabled={loading} onClick={clickHandler(index, true)}/>\n                        <input type='button' className = 'nobtn'  value = 'нет' disabled={loading} onClick={clickHandler(index, false)}/>\n                    </div>\n                )\n            }\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}