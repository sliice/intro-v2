{"ast":null,"code":"var _jsxFileName = \"/Users/alisakrylova/Intro/client/src/components/TestPage.js\";\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport './Appearence/index.css';\nimport './Appearence/TestPage.css';\nimport { AuthContext } from \"./Context/AuthContext\";\nimport { useHttp } from \"../Hooks/Http.hook\";\nimport { useHistory, useParams } from 'react-router-dom';\nimport { NavLink } from \"react-router-dom\";\nimport { ReactComponent as Arrow } from \"@svgr/webpack?-svgo,+titleProp,+ref!./Appearence/Images/Arrow.svg\";\nimport { ReactComponent as EditIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./Appearence/Images/EditIcon.svg\";\nexport const TestPage = () => {\n  const link = useParams().id;\n  const history = useHistory();\n  const [test, setTest] = useState({\n    name: '',\n    description: '',\n    shortDescription: '',\n    questions: [],\n    answers: []\n  });\n  const {\n    token,\n    userID,\n    username,\n    userType\n  } = useContext(AuthContext);\n  const [answers, setAnswers] = useState([]);\n  const {\n    request\n  } = useHttp();\n  const [content, setContent] = useState('description');\n  const [index, setIndex] = useState(0);\n  const [goNext, setGoNext] = useState(false);\n  const fetchTestData = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/tests/short/${link}`, 'GET', null, {\n        Authorization: `Bearer ${token}`\n      });\n      setTest(fetched);\n    } catch (e) {\n      history.push('/');\n    }\n  }, [token, request]);\n\n  const saveAnswers = async () => {\n    console.log(answers);\n\n    try {\n      const data = await request(`${link}/save`, 'POST', {\n        userID,\n        answers,\n        link,\n        date: new Date()\n      });\n      if (data.message === 'Result is saved') history.push(`/tests/${link}/${username}`);\n    } catch (e) {}\n  };\n\n  const showTest = e => {\n    e.preventDefault();\n    setContent('testStartPage');\n  };\n\n  const next = async e => {\n    e.preventDefault();\n    if (index != test.q - 1) setIndex(index + 1);else await saveAnswers();\n  };\n\n  const back = e => {\n    e.preventDefault();\n    setTimeout(() => setIndex(index - 1), 300);\n  };\n\n  const handleAnswering = async (e, i, j) => {\n    let answ = answers;\n    if (!answ[j]) answ[j] = [];\n    if (!answ[j].includes(i)) answ[j].push(i);\n\n    for (let k = 0; k < answ.length; k++) {\n      if (!answ[k]) answ[k] = [];else {\n        if (answ[k].includes(i)) {\n          let index = answ[k].indexOf(i);\n          if (index != -1 && j != k) answ[k].splice(index, 1);\n        }\n\n        answ[k].sort((a, b) => a > b ? 1 : -1);\n      }\n    }\n\n    setAnswers(answ);\n    await next(e);\n  };\n\n  useEffect(() => {\n    fetchTestData();\n    if (content === 'testStartPage') document.body.style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: #E6EBC3;'; // document.title =\n\n    console.log(test);\n  }, [fetchTestData, content]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, content === 'description' && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"testInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"nameAndEditIcon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, test.name), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"bigTestName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, test.name), userType === 'p' && /*#__PURE__*/React.createElement(NavLink, {\n    to: `/tests/${link}/edit`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(EditIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"testDescription\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, test.shortDescription, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }), test.description), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flexboxRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    type: \"button\",\n    className: \"longGreenBtn\",\n    onClick: showTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 29\n    }\n  }, \"\\u041F\\u0440\\u043E\\u0439\\u0442\\u0438\")))), content === 'testStartPage' && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, test.questions.map((question, i) => {\n    if (i == index) return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questionCard\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 32\n      }\n    }, i > 0 && /*#__PURE__*/React.createElement(Arrow, {\n      className: \"backArrow\",\n      onClick: e => back(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 40\n      }\n    })), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 32\n      }\n    }, i + 1, \"/\", test.q), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 32\n      }\n    }, question), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answersBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 32\n      }\n    }, test.answers.map((answer, j) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"answersBox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 44\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"answerbtn\",\n        key: j,\n        onClick: e => handleAnswering(e, i, j),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 48\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 48\n        }\n      }, answer));\n    })));\n  })));\n};\nexport default TestPage;","map":{"version":3,"sources":["/Users/alisakrylova/Intro/client/src/components/TestPage.js"],"names":["React","useCallback","useContext","useEffect","useState","AuthContext","useHttp","useHistory","useParams","NavLink","TestPage","link","id","history","test","setTest","name","description","shortDescription","questions","answers","token","userID","username","userType","setAnswers","request","content","setContent","index","setIndex","goNext","setGoNext","fetchTestData","fetched","Authorization","e","push","saveAnswers","console","log","data","date","Date","message","showTest","preventDefault","next","q","back","setTimeout","handleAnswering","i","j","answ","includes","k","length","indexOf","splice","sort","a","b","document","body","style","map","question","answer"],"mappings":"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","sourcesContent":["import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport './Appearence/index.css'\nimport './Appearence/TestPage.css'\nimport {AuthContext} from \"./Context/AuthContext\";\nimport {useHttp} from \"../Hooks/Http.hook\";\nimport {useHistory, useParams} from 'react-router-dom'\nimport {NavLink} from \"react-router-dom\";\nimport {ReactComponent as Arrow} from './Appearence/Images/Arrow.svg'\nimport {ReactComponent as EditIcon} from './Appearence/Images/EditIcon.svg'\n\nexport const TestPage = () => {\n\n    const link = useParams().id\n    const history = useHistory()\n\n    const [test, setTest] = useState({ name: '', description: '', shortDescription: '', questions: [], answers: []})\n    const {token, userID, username, userType} = useContext(AuthContext)\n    const [answers, setAnswers] = useState([])\n    const {request} = useHttp()\n\n\n    const [content, setContent] = useState('description')\n    const [index, setIndex] = useState(0)\n    const [goNext, setGoNext] = useState(false)\n\n    const fetchTestData = useCallback(async () => {\n        try {\n            const fetched = await request(`/api/tests/short/${link}`, 'GET', null, {\n                Authorization: `Bearer ${token}`,\n            })\n            setTest(fetched)\n        }\n        catch (e) {\n            history.push('/')\n        }\n    }, [token, request])\n\n    const saveAnswers = async () => {\n        console.log(answers)\n        try {\n            const data = await request(`${link}/save`, 'POST', {userID, answers, link, date: new Date()})\n            if (data.message === 'Result is saved')\n                history.push(`/tests/${link}/${username}`)\n        }\n        catch (e) {}\n    }\n\n    const showTest = e => {\n        e.preventDefault()\n        setContent('testStartPage')\n    }\n    const next = async (e) => {\n        e.preventDefault()\n        if (index != test.q - 1)\n            setIndex(index + 1)\n        else\n            await saveAnswers()\n\n    }\n\n    const back = e => {\n        e.preventDefault()\n        setTimeout(() =>  setIndex(index - 1), 300)\n    }\n\n    const handleAnswering = async (e, i, j) => {\n        let answ = answers\n\n        if (!answ[j])\n            answ[j] = []\n\n        if (!answ[j].includes(i))\n            answ[j].push(i)\n\n        for (let k = 0; k < answ.length; k++){\n            if (!answ[k])\n                answ[k] = []\n            else {\n                if (answ[k].includes(i)){\n                    let index = answ[k].indexOf(i)\n                    if (index != -1 && j != k)\n                        answ[k].splice(index, 1)\n                }\n                answ[k].sort((a, b) => a > b ? 1 : -1)\n            }\n        }\n\n        setAnswers(answ)\n        await next(e)\n    }\n\n    useEffect(() => {\n        fetchTestData()\n        if (content === 'testStartPage')\n            document.body.style = 'transition-duration: 1s; transition-timing-function: ease-in-out; background: #E6EBC3;'\n        // document.title =\n            console.log(test)\n    }, [fetchTestData, content])\n\n\n    return (\n        <div>\n            { content === 'description' &&\n                <div className = 'testInfo'>\n\n                    <div className = 'nameAndEditIcon'>\n                        <title>{test.name}</title>\n                        <h1 className = 'bigTestName'>{test.name}</h1>\n                        {\n                            userType === 'p' &&\n                            <NavLink to = {`/tests/${link}/edit`}>\n                                <EditIcon/>\n                            </NavLink>\n                        }\n                    </div>\n\n                    <p className='testDescription'>{test.shortDescription}\n                    <br/>{test.description}</p>\n\n                    <div className = 'flexboxRow'>\n                        <div type='button' className = 'longGreenBtn' onClick = {showTest}>\n                            <p>Пройти</p>\n                        </div>\n                    </div>\n                </div>\n            }\n\n            { content === 'testStartPage' &&\n                <div>\n                {\n                   test.questions.map((question, i) => {\n                       if (i == index)\n                       return (\n                           <div className = 'questionCard' key = {i}>\n\n                               <div className = 'arrows'>\n                                   {\n                                       (i > 0) &&\n                                       <Arrow className = 'backArrow' onClick={e => back(e)}/>\n                                   }\n                               </div>\n\n                               <h1>{i + 1}/{test.q}</h1>\n                               <p>{question}</p>\n\n                               <div className = 'answersBox'>\n                               {\n                                   test.answers.map((answer, j) => {\n                                       return(\n                                           <div className = 'answersBox'>\n                                               <div className = 'answerbtn' key = {j} onClick = {(e) => handleAnswering(e, i, j)}/>\n                                               <p>{answer}</p>\n                                           </div>)\n                                   })\n                               }\n                                   </div>\n\n                               {\n                                   // && (answers.filter(a => a.includes(i)).length == 1) &&\n                                   // answers.filter(a => a.includes(i)).length > 0 &&\n                               }\n                           </div>\n                       )\n                        })\n                }\n                    {/*{*/}\n                    {/*    // index == test.questions - 1 &&*/}\n                        {/*<input type='button' className = 'yesbtn'  value = 'результат' disabled={loading} onClick={e => saveAnswers(e)}/>*/}\n                    {/*}*/}\n                    {/*<input type='button' className = 'yesbtn'  value = 'результат' disabled={loading} onClick={e => saveAnswers(e)}/>*/}\n                </div>\n            }\n        </div>\n\n\n    )\n}\n\nexport default TestPage;"]},"metadata":{},"sourceType":"module"}