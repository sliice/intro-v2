{"ast":null,"code":"'use strict';\n\nmodule.exports = function cyrillicToTranslit(config) {\n  const invert = require('lodash.invert');\n\n  const _preset = config ? config.preset : \"ru\";\n  /*\r\n  ASSOCIATIONS FOR INITIAL POSITION\r\n  */\n  // letters shared between languages\n\n\n  const _firstLetters = {\n    \"а\": \"a\",\n    \"б\": \"b\",\n    \"в\": \"v\",\n    \"д\": \"d\",\n    \"з\": \"z\",\n    \"й\": \"y\",\n    \"к\": \"k\",\n    \"л\": \"l\",\n    \"м\": \"m\",\n    \"н\": \"n\",\n    \"о\": \"o\",\n    \"п\": \"p\",\n    \"р\": \"r\",\n    \"с\": \"s\",\n    \"т\": \"t\",\n    \"у\": \"u\",\n    \"ф\": \"f\",\n    \"ь\": \"\"\n  }; // language-specific letters\n\n  if (_preset === \"ru\") {\n    Object.assign(_firstLetters, {\n      \"г\": \"g\",\n      \"и\": \"i\",\n      \"ъ\": \"\",\n      \"ы\": \"i\",\n      \"э\": \"e\"\n    });\n  } else if (_preset === \"uk\") {\n    Object.assign(_firstLetters, {\n      \"г\": \"h\",\n      \"ґ\": \"g\",\n      \"е\": \"e\",\n      \"и\": \"y\",\n      \"і\": \"i\",\n      \"'\": \"\",\n      \"’\": \"\",\n      \"ʼ\": \"\"\n    });\n  }\n\n  let _reversedFirstLetters;\n\n  if (_preset === \"ru\") {\n    // Russian: i > always и, y > й in initial position, e > э in initial position\n    _reversedFirstLetters = Object.assign(invert(_firstLetters), {\n      \"i\": \"и\",\n      \"\": \"\"\n    });\n  } else if (_preset === \"uk\") {\n    // Ukrainian: i > always i, y > always и, e > always е\n    _reversedFirstLetters = Object.assign(invert(_firstLetters), {\n      \"\": \"\"\n    });\n  } // digraphs appearing only in initial position\n\n\n  const _initialDigraphs = _preset === \"ru\" ? {\n    \"е\": \"ye\"\n  } : {\n    \"є\": \"ye\",\n    \"ї\": \"yi\"\n  }; // digraphs appearing in all positions\n\n\n  const _regularDigraphs = {\n    \"ё\": \"yo\",\n    \"ж\": \"zh\",\n    \"х\": \"kh\",\n    \"ц\": \"ts\",\n    \"ч\": \"ch\",\n    \"ш\": \"sh\",\n    \"щ\": \"shch\",\n    \"ю\": \"yu\",\n    \"я\": \"ya\"\n  };\n\n  const _firstDigraphs = Object.assign({}, _regularDigraphs, _initialDigraphs);\n\n  const _reversedFirstDigraphs = Object.assign(invert(_firstDigraphs));\n\n  const _firstAssociations = Object.assign(_firstLetters, _firstDigraphs);\n  /*\r\n  ASSOCIATIONS FOR NON-INITIAL POSITION\r\n  */\n\n\n  const _nonFirstLetters = Object.assign({}, _firstLetters, {\n    \"й\": \"i\"\n  });\n\n  if (_preset === \"ru\") {\n    Object.assign(_nonFirstLetters, {\n      \"е\": \"e\"\n    });\n  } else if (_preset === \"uk\") {\n    Object.assign(_nonFirstLetters, {\n      \"ї\": \"i\"\n    });\n  }\n\n  let _reversedNonFirstLetters;\n\n  if (_preset === \"ru\") {\n    // Russian: i > always и, y > ы in non-initial position, e > е in non-initial position\n    _reversedNonFirstLetters = Object.assign(invert(_firstLetters), {\n      \"i\": \"и\",\n      \"y\": \"ы\",\n      \"e\": \"е\",\n      \"\": \"\"\n    });\n  } else if (_preset === \"uk\") {\n    // Ukrainian: i > always i, y > always и, e > always е\n    _reversedNonFirstLetters = Object.assign(invert(_firstLetters), {\n      \"\": \"\"\n    });\n  } // digraphs appearing only in non-initial positions\n\n\n  let _nonInitialDigraphs = {};\n\n  if (_preset === \"uk\") {\n    _nonInitialDigraphs = {\n      \"є\": \"ie\",\n      \"ю\": \"iu\",\n      \"я\": \"ia\"\n    };\n  }\n\n  const _nonFirstDigraphs = Object.assign(_regularDigraphs, _nonInitialDigraphs);\n\n  const _reversedNonFirstDigraphs = Object.assign(invert(_nonFirstDigraphs));\n\n  const _nonFirstAssociations = Object.assign(_nonFirstLetters, _nonFirstDigraphs);\n\n  function transform(input, spaceReplacement) {\n    if (!input) {\n      return \"\";\n    } // We must normalize string for transform all unicode chars to uniform form\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\n\n    const normalizedInput = input.normalize();\n    let newStr = \"\";\n    let isWordBoundary = false;\n\n    for (let i = 0; i < normalizedInput.length; i++) {\n      const isUpperCaseOrWhatever = normalizedInput[i] === normalizedInput[i].toUpperCase();\n      let strLowerCase = normalizedInput[i].toLowerCase();\n\n      if (strLowerCase === \" \") {\n        newStr += spaceReplacement ? spaceReplacement : \" \";\n        isWordBoundary = true;\n        continue;\n      }\n\n      let newLetter;\n\n      if (_preset === \"uk\" && normalizedInput.slice(i - 1, i + 1).toLowerCase() === \"зг\") {\n        // handle ukrainian special case зг > zgh\n        newLetter = \"gh\";\n      } else if (i === 0 || isWordBoundary) {\n        newLetter = _firstAssociations[strLowerCase];\n        isWordBoundary = false;\n      } else {\n        newLetter = _nonFirstAssociations[strLowerCase];\n      }\n\n      if (\"undefined\" === typeof newLetter) {\n        newStr += isUpperCaseOrWhatever ? strLowerCase.toUpperCase() : strLowerCase;\n      } else if (isUpperCaseOrWhatever) {\n        // handle multi-symbol letters\n        newLetter.length > 1 ? newStr += newLetter[0].toUpperCase() + newLetter.slice(1) : newStr += newLetter.toUpperCase();\n      } else {\n        newStr += newLetter;\n      }\n    }\n\n    return newStr;\n  }\n\n  function reverse(input, spaceReplacement) {\n    if (!input) return \"\";\n    const normalizedInput = input.normalize();\n    let newStr = \"\";\n    let isWordBoundary = false;\n    let i = 0;\n\n    while (i < normalizedInput.length) {\n      const isUpperCaseOrWhatever = normalizedInput[i] === normalizedInput[i].toUpperCase();\n      let strLowerCase = normalizedInput[i].toLowerCase();\n      let currentIndex = i;\n\n      if (strLowerCase === \" \" || strLowerCase === spaceReplacement) {\n        newStr += \" \";\n        isWordBoundary = true;\n        i++;\n        continue;\n      }\n\n      let newLetter;\n      let digraph = normalizedInput.slice(i, i + 2).toLowerCase();\n\n      if (i === 0 || isWordBoundary) {\n        newLetter = _reversedFirstDigraphs[digraph];\n\n        if (newLetter) {\n          i += 2;\n        } else {\n          newLetter = _reversedFirstLetters[strLowerCase];\n          i++;\n        }\n\n        isWordBoundary = false;\n      } else {\n        newLetter = _reversedNonFirstDigraphs[digraph];\n\n        if (newLetter) {\n          i += 2;\n        } else {\n          newLetter = _reversedNonFirstLetters[strLowerCase];\n          i++;\n        }\n      } // special cases: щ and зг\n\n\n      if (normalizedInput.slice(currentIndex, currentIndex + 4).toLowerCase() === \"shch\") {\n        newLetter = \"щ\";\n        i = currentIndex + 4;\n      } else if (normalizedInput.slice(currentIndex - 1, currentIndex + 2).toLowerCase() === \"zgh\") {\n        newLetter = \"г\";\n        i = currentIndex + 2;\n      }\n\n      if (\"undefined\" === typeof newLetter) {\n        newStr += isUpperCaseOrWhatever ? strLowerCase.toUpperCase() : strLowerCase;\n      } else {\n        if (isUpperCaseOrWhatever) {\n          // handle multi-symbol letters\n          newLetter.length > 1 ? newStr += newLetter[0].toUpperCase() + newLetter.slice(1) : newStr += newLetter.toUpperCase();\n        } else {\n          newStr += newLetter;\n        }\n      }\n    }\n\n    return newStr;\n  }\n\n  return {\n    transform: transform,\n    reverse: reverse\n  };\n};","map":{"version":3,"sources":["/Users/alisakrylova/Intro2/node_modules/cyrillic-to-translit-js/CyrillicToTranslit.js"],"names":["module","exports","cyrillicToTranslit","config","invert","require","_preset","preset","_firstLetters","Object","assign","_reversedFirstLetters","_initialDigraphs","_regularDigraphs","_firstDigraphs","_reversedFirstDigraphs","_firstAssociations","_nonFirstLetters","_reversedNonFirstLetters","_nonInitialDigraphs","_nonFirstDigraphs","_reversedNonFirstDigraphs","_nonFirstAssociations","transform","input","spaceReplacement","normalizedInput","normalize","newStr","isWordBoundary","i","length","isUpperCaseOrWhatever","toUpperCase","strLowerCase","toLowerCase","newLetter","slice","reverse","currentIndex","digraph"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nmodule.exports = function cyrillicToTranslit(config) {\r\n  const invert = require('lodash.invert');\r\n  const _preset = config ? config.preset : \"ru\";\r\n\r\n  /*\r\n  ASSOCIATIONS FOR INITIAL POSITION\r\n  */\r\n\r\n  // letters shared between languages\r\n  const _firstLetters = {\r\n    \"а\": \"a\",\r\n    \"б\": \"b\",\r\n    \"в\": \"v\",\r\n    \"д\": \"d\",\r\n    \"з\": \"z\",\r\n    \"й\": \"y\",\r\n    \"к\": \"k\",\r\n    \"л\": \"l\",\r\n    \"м\": \"m\",\r\n    \"н\": \"n\",\r\n    \"о\": \"o\",\r\n    \"п\": \"p\",\r\n    \"р\": \"r\",\r\n    \"с\": \"s\",\r\n    \"т\": \"t\",\r\n    \"у\": \"u\",\r\n    \"ф\": \"f\",\r\n    \"ь\": \"\"\r\n  };\r\n\r\n  // language-specific letters\r\n  if (_preset === \"ru\") {\r\n    Object.assign(_firstLetters, {\r\n      \"г\": \"g\",\r\n      \"и\": \"i\",\r\n      \"ъ\": \"\",\r\n      \"ы\": \"i\",\r\n      \"э\": \"e\",\r\n    });\r\n  } else if (_preset === \"uk\") {\r\n    Object.assign(_firstLetters, {\r\n      \"г\": \"h\",\r\n      \"ґ\": \"g\",\r\n      \"е\": \"e\",\r\n      \"и\": \"y\",\r\n      \"і\": \"i\",\r\n      \"'\": \"\",\r\n      \"’\": \"\",\r\n      \"ʼ\": \"\",\r\n    })\r\n  }\r\n\r\n  let _reversedFirstLetters;\r\n  if (_preset === \"ru\") {\r\n    // Russian: i > always и, y > й in initial position, e > э in initial position\r\n    _reversedFirstLetters = Object.assign(invert(_firstLetters), { \"i\": \"и\", \"\": \"\" });\r\n  } else if (_preset === \"uk\") {\r\n    // Ukrainian: i > always i, y > always и, e > always е\r\n    _reversedFirstLetters = Object.assign(invert(_firstLetters), { \"\": \"\" });\r\n  }\r\n\r\n  // digraphs appearing only in initial position\r\n  const _initialDigraphs = (_preset === \"ru\") ? { \"е\": \"ye\" } : { \"є\": \"ye\", \"ї\": \"yi\" };\r\n\r\n  // digraphs appearing in all positions\r\n  const _regularDigraphs = {\r\n    \"ё\": \"yo\",\r\n    \"ж\": \"zh\",\r\n    \"х\": \"kh\",\r\n    \"ц\": \"ts\",\r\n    \"ч\": \"ch\",\r\n    \"ш\": \"sh\",\r\n    \"щ\": \"shch\",\r\n    \"ю\": \"yu\",\r\n    \"я\": \"ya\",\r\n  }\r\n\r\n  const _firstDigraphs = Object.assign({}, _regularDigraphs, _initialDigraphs);\r\n\r\n  const _reversedFirstDigraphs = Object.assign(invert(_firstDigraphs));\r\n\r\n  const _firstAssociations = Object.assign(_firstLetters, _firstDigraphs);\r\n\r\n  /*\r\n  ASSOCIATIONS FOR NON-INITIAL POSITION\r\n  */\r\n\r\n  const _nonFirstLetters = Object.assign({}, _firstLetters, { \"й\": \"i\" });\r\n  if (_preset === \"ru\") {\r\n    Object.assign(_nonFirstLetters, { \"е\": \"e\" });\r\n  } else if (_preset === \"uk\") {\r\n    Object.assign(_nonFirstLetters, { \"ї\": \"i\" });\r\n  }\r\n\r\n  let _reversedNonFirstLetters;\r\n  if (_preset === \"ru\") {\r\n    // Russian: i > always и, y > ы in non-initial position, e > е in non-initial position\r\n    _reversedNonFirstLetters = Object.assign(invert(_firstLetters), {\r\n      \"i\": \"и\", \r\n      \"y\": \"ы\",\r\n      \"e\": \"е\",\r\n      \"\": \"\" \r\n    });\r\n  } else if (_preset === \"uk\") {\r\n    // Ukrainian: i > always i, y > always и, e > always е\r\n    _reversedNonFirstLetters = Object.assign(invert(_firstLetters), { \"\": \"\" });\r\n  }\r\n\r\n  // digraphs appearing only in non-initial positions\r\n  let _nonInitialDigraphs = {};\r\n  if (_preset === \"uk\") {\r\n    _nonInitialDigraphs = {\r\n      \"є\": \"ie\",\r\n      \"ю\": \"iu\",\r\n      \"я\": \"ia\",\r\n    };\r\n  }\r\n\r\n  const _nonFirstDigraphs = Object.assign(_regularDigraphs, _nonInitialDigraphs);\r\n\r\n  const _reversedNonFirstDigraphs = Object.assign(invert(_nonFirstDigraphs));\r\n\r\n  const _nonFirstAssociations = Object.assign(_nonFirstLetters, _nonFirstDigraphs);\r\n\r\n\r\n  function transform(input, spaceReplacement) {\r\n    if (!input) {\r\n      return \"\";\r\n    }\r\n\r\n    // We must normalize string for transform all unicode chars to uniform form\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\r\n    const normalizedInput = input.normalize();\r\n\r\n    let newStr = \"\";\r\n    let isWordBoundary = false;\r\n\r\n    for (let i = 0; i < normalizedInput.length; i++) {\r\n      const isUpperCaseOrWhatever = normalizedInput[i] === normalizedInput[i].toUpperCase();\r\n      let strLowerCase = normalizedInput[i].toLowerCase();\r\n\r\n      if (strLowerCase === \" \") {\r\n        newStr += spaceReplacement ? spaceReplacement :  \" \";\r\n        isWordBoundary = true;\r\n        continue;\r\n      }\r\n\r\n      let newLetter;\r\n\r\n      if ( _preset === \"uk\" && normalizedInput.slice(i-1, i+1).toLowerCase() === \"зг\") {\r\n        // handle ukrainian special case зг > zgh\r\n        newLetter = \"gh\";\r\n      } else if (i === 0 || isWordBoundary) {\r\n        newLetter = _firstAssociations[strLowerCase];\r\n        isWordBoundary = false;\r\n      } else {\r\n        newLetter = _nonFirstAssociations[strLowerCase];\r\n      }\r\n\r\n      if (\"undefined\" === typeof newLetter) {\r\n        newStr += isUpperCaseOrWhatever ? strLowerCase.toUpperCase() : strLowerCase;\r\n      } else if (isUpperCaseOrWhatever) {\r\n        // handle multi-symbol letters\r\n        newLetter.length > 1\r\n          ? newStr += newLetter[0].toUpperCase() + newLetter.slice(1)\r\n          : newStr += newLetter.toUpperCase();\r\n      } else {\r\n        newStr += newLetter;\r\n      }\r\n    }\r\n    return newStr;\r\n  }\r\n\r\n  function reverse(input, spaceReplacement) {\r\n\r\n    if (!input) return \"\";\r\n\r\n    const normalizedInput = input.normalize();\r\n\r\n    let newStr = \"\";\r\n    let isWordBoundary = false;\r\n    let i = 0;\r\n\r\n    while (i < normalizedInput.length) {\r\n      const isUpperCaseOrWhatever = normalizedInput[i] === normalizedInput[i].toUpperCase();\r\n      let strLowerCase = normalizedInput[i].toLowerCase();\r\n      let currentIndex = i;\r\n\r\n      if (strLowerCase === \" \" || strLowerCase === spaceReplacement) {\r\n        newStr += \" \";\r\n        isWordBoundary = true;\r\n        i++;\r\n        continue;\r\n      }\r\n      \r\n      let newLetter;\r\n\r\n      let digraph = normalizedInput.slice(i, i + 2).toLowerCase();\r\n      if (i === 0 || isWordBoundary) {\r\n        newLetter = _reversedFirstDigraphs[digraph];\r\n        if (newLetter) {\r\n          i += 2;\r\n        } else {\r\n          newLetter = _reversedFirstLetters[strLowerCase];\r\n          i++;\r\n        }\r\n        isWordBoundary = false;\r\n      } else {\r\n        newLetter = _reversedNonFirstDigraphs[digraph];\r\n        if (newLetter) {\r\n          i += 2;\r\n        } else {\r\n          newLetter = _reversedNonFirstLetters[strLowerCase];\r\n          i++;\r\n        }\r\n      }\r\n\r\n      // special cases: щ and зг\r\n      if (normalizedInput.slice(currentIndex, currentIndex + 4).toLowerCase() === \"shch\") {\r\n        newLetter = \"щ\";\r\n        i = currentIndex + 4;\r\n      } else if (normalizedInput.slice(currentIndex - 1, currentIndex + 2).toLowerCase() === \"zgh\") {\r\n        newLetter = \"г\";\r\n        i = currentIndex + 2;\r\n      }\r\n\r\n      if (\"undefined\" === typeof newLetter) {\r\n        newStr += isUpperCaseOrWhatever ? strLowerCase.toUpperCase() : strLowerCase;\r\n      }\r\n      else {\r\n        if (isUpperCaseOrWhatever) {\r\n            // handle multi-symbol letters\r\n            newLetter.length > 1\r\n              ? newStr += newLetter[0].toUpperCase() + newLetter.slice(1)\r\n              : newStr += newLetter.toUpperCase();\r\n        } else {\r\n            newStr += newLetter;\r\n        }\r\n      }\r\n    }\r\n\r\n    return newStr;\r\n  }\r\n\r\n  return {\r\n    transform: transform,\r\n    reverse: reverse\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}